#!/usr/bin/perl -w
#
###############################################################################
#
# File: fwsnort
#
# Purpose: To translate snort rules into equivalent iptables rules.
#          fwsnort is based on the original snort2iptables shell script
#          written by William Stearns.
#
# Author: Michael B. Rash <mbr@cipherdyne.com>
#
# Copyright (C) 2003 Michael B. Rash (mbr@cipherdyne.com)
#
# License (GNU Public License):
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#    USA
#
# Snort Rule Options:
#
#   msg:           Prints a message in alerts and packet logs.
#   logto:         Log the packet to a user specified filename instead of the
#                  standard output file.
#   ttl:           Test the IP header's TTL field value.
#   tos:           Test the IP header's TOS field value.
#   id:            Test the IP header's fragment ID field for a specific
#                  value.
#   ipoption:      Watch the IP option fields for specific codes.
#   fragbits:      Test the fragmentation bits of the IP header.
#   dsize:         Test the packet's payload size against a value.
#   flags          Test the TCP flags for certain values.
#   seq:           Test the TCP sequence number field for a specific value.
#   ack:           Test the TCP acknowledgement field for a specific value.
#   itype:         Test the ICMP type field against a specific value.
#   icode:         Test the ICMP code field against a specific value.
#   icmp_id:       Test the ICMP ECHO ID field against a specific value.
#   icmp_seq:      Test the ICMP ECHO sequence number against a specific
#                  value.
#   content:       Search for a pattern in the packet's payload.
#   content-list:  Search for a set of patterns in the packet's payload.
#   offset:        Modifier for the content option, sets the offset to begin
#                  attempting a pattern match.
#   depth:         Modifier for the content option, sets the maximum search
#                  depth for a pattern match attempt.
#   nocase:        Match the preceding content string with case insensitivity.
#   session        Dumps the application layer information for a given
#                  session.
#   rpc:           Watch RPC services for specific application/procedure
#                  calls.
#   resp:          Active response (knock down connections, etc).
#   react:         Active response (block web sites).
#   reference:     External attack reference ids.
#   sid:           snort rule id.
#   rev:           Rule revision number.
#   classtype:     Rule classification identifier.
#   priority:      Rule severity identifier.
#   uricontent:    Search for a pattern in the URI portion of a packet
#   tag:           Advanced logging actions for rules.
#   ip_proto:      IP header's protocol value.
#   sameip:        Determines if source ip equals the destination ip.
#   stateless:     Valid regardless of stream state.
#   regex:         Wildcard pattern matching.
#
############################################################################
#
# $Id$
#

use IPTables::Parse;
use Net::IPv4Addr qw(ipv4_network);
use File::Copy;
use Sys::Hostname;
use Getopt::Long;
use strict;

#======================== config ========================
my $fwsnort_dir = '/etc/fwsnort';
my $rules_dir   = "${fwsnort_dir}/snort-1.8.7_rules";
my $archive_dir = "${fwsnort_dir}/archive";

### config file
my $fwsnort_conf = "${fwsnort_dir}/fwsnort.conf";

### log file
my $logfile = "${fwsnort_dir}/fwsnort.log";

### iptables script
my $ipt_ruleset = "${fwsnort_dir}/ipt_ruleset.sh";
#===================== end config =======================

### version number
my $version = '0.1';

### supported variables in snort signatures
my %snort_vars = (
    'EXTERNAL_NET'    => '',
    'HOME_NET'        => '',
    'HTTP_SERVERS'    => '',
    'SMTP_SERVERS'    => '',
    'DNS_SERVERS'     => '',
    'HTTP_PORTS'      => '',
    'TELNET_SERVERS'  => '',
    'AIM_SERVERS'     => '',
    'SQL_SERVERS'     => '',
    'SHELLCODE_PORTS' => '',
    'ORACLE_PORTS'    => ''
);

my %iptables_opts = (
    'uricontent' => '-m string',
    'content' => '-m string',
    'ipopts'  => '-m ipv4options',
    'flags'   => '--tcp-flags',
    'itype'   => '--icmp-type',
    'ttl'     => '--ttl',
    'tos'     => '--tos',
    'seq'     => '--log-tcp-sequence',
    'src'     => '-s',
    'src_p'   => '--sport',
    'dst'     => '-d',
    'dst_p'   => '--dport',
    'proto'   => '-p'
);

my %snort_opts = (
    ### snort options that we can directly filter on
    ### in iptables rulesets (snort options are separate
    ### from the snort "header" which include protocol,
    ### source, destination, etc.)
    'filter' => {
        'uricontent' => '[\s;]uricontent:\s*\"(.*?)\"\s*;',
        'content' => '[\s;]content:\s*\"(.*?)\"\s*;',
        'flags'   => '[\s;]flags:\s*(.*?)\s*;',
        'itype'   => '[\s;]itype:\s*(\d+)\s*;',
        'ttl'     => '[\s;]ttl:\s*(\d+)\s*;',
        'tos'     => '[\s;]tos:\s*(\d+)\s*;',
        'ipopts'  => '[\s;]ipopts:\s*(\w+)\s*;',
#       'flow'    => ''  ### not implemented yet
    },

    ### snort options which are logged within iptables
    ### logging statements (so we can detect these values
    ### but just not filter them directly)
#    'log_only' => {
#        'id'       => '[\s;]id:\s*(\d+)\s*;',
#        'seq'      => '[\s;]seq:\s*(\d+)\s*;',
#        'icmp_seq' => '[\s;]icmp_seq:\s*(\d+)\s*;',
#        'icmp_id'  => '[\s;]icmp_id:\s*(\d+)\s*;',
#        'icode'    => '[\s;]icode:\s*(\d+)\s*;'
#    },

    ### snort options that can be put into iptables
    ### ruleset, but only in log messages with --log-prefix
    'logprefix' =>  {
        'sid'       => '[\s;]sid:\s*(\d+)\s*;',
        'msg'       => 'msg:\s*\"(.*?)\"\s*;',
        'classtype' => '[\s;]classtype:\s*(.*?)\s*;',
        'reference' => '[\s;]reference:\s*(.*?)\s*;'
    },

    ### snort options that cannot be included directly
    ### within iptables filter statements (yet :)
    'unsupported' => {
        'dsize'        => '[\s;]dsize:\s*\S+\s*;',
        'seq'          => '[\s;]seq:\s*\d+\s*;',
        'ack'          => '[\s;]ack:\s*\d+\s*;',
        'fragbits'     => '[\s;]fragbits:\s*\S+\s*;',
        'content-list' => '[\s;]content\-list:\s*\".*?\"\s*;',
        'rpc'          => '[\s;]rpc:\s*\S+\s*;',

        ### the following fields get logged by iptables but
        ### we cannot filter them directly (yet).
        'id'       => '[\s;]id:\s*(\d+)\s*;',
        'seq'      => '[\s;]seq:\s*(\d+)\s*;',
        'icmp_seq' => '[\s;]icmp_seq:\s*(\d+)\s*;',
        'icmp_id'  => '[\s;]icmp_id:\s*(\d+)\s*;',
        'icode'    => '[\s;]icode:\s*(\d+)\s*;',
        'sameip'   => '[\s;]sameip\s*;'
    },

    ### snort options that fwsnort will ignore
    'ignore' => {
        'rev'    => '[\s;]rev:\s*(\d+)\s*;',
        'offset' => '[\s;]offset:\s*\d+\s*;',
        'depth'  => '[\s;]depth:\s*\d+\s*;',
        'nocase' => '[\s;]nocase\s*;'
    }
);

### variables that are supported by the fwsnort config
my %conf_supported_vars = ();

### port config (see any snort.conf file)
my @http_ports      = ();
my @shellcode_ports = ();
my @oracle_ports    = ();

### interface config
my %intf_net  = ();  ### corresponds to $EXTERNAL_NET and $HOME_NET
my %intf_type = ();

### server config
my @http_servers   = ();
my @smtp_servers   = ();
my @dns_servers    = ();
my @sql_servers    = ();
my @telnet_servers = ();
my @aim_servers    = ();

### contains the names of user-defined iptables chains for
### fwsnort rules
my %fwsnort_chains;

### For each internal interface fwsnort will create two associated iptables
### chains.  For example, suppose eth0 is the external interface and
### eth1 is the internal interface:
###   jump int: eth0   dst: internal network  (src doesn't matter)
###   jump int: eth1   src: internal network  (dst doesn't matter)

### config and commands hashes (constructed by readconf())
my %config;
my %cmds;

### establish some default behavior
my $fw_apply   = 0;
my $fw_log     = 0;
my $fw_drop    = 0;
my $fw_reject  = 0;
my $help       = 0;
my $stdout     = 0;
my $debug      = 0;
my $strict     = 0;
my $snort_sid  = 0;
my $dump_conf  = 0;
my $ver        = 0;
my $ipt_rule_ctr = 1;
my $rules_type = '';

&usage(1) unless (GetOptions(
    'fw-apply'    => \$fw_apply,   # apply the generated ruleset
    'fw-log'      => \$fw_log,
    'fw-drop'     => \$fw_drop,
    'fw-reject'   => \$fw_reject,
    'snort-sid=i' => \$snort_sid,  # Parse only this particular snort rule
    'type=s'      => \$rules_type, # process this type of snort rule (e.g. "ddos")
    'logfile=s'   => \$logfile,
    'stdout'      => \$stdout,     # print the fw ruleset on STDOUT
    'strict'      => \$strict,
    'debug'       => \$debug,
    'dump-conf'   => \$dump_conf,  # display config variables
    'config=s'    => \$fwsnort_conf, # manually specify the config file
    'Version'     => \$ver,
    'help'        => \$help
));

&usage(0) if $help;

### Print the version number and exit if -V given on the command line.
if ($ver) {
    print " .. fwsnort v$version, by Michael Rash (mbr\@cipherdyne.com)\n";
    exit 0;
}

if ($strict) {
    ### make the snort options parser very strict
    delete $snort_opts{'filter'}{'uricontent'};
    $snort_opts{'unsupported'}{'uricontent'}
        = '[\s;]uricontent:\s*\"(.*?)\"\s*;';
    delete $snort_opts{'ignore'}{'offset'};
    $snort_opts{'unsupported'}{'offset'}
        = '[\s;]offset:\s*\d+\s*;';
    delete $snort_opts{'ignore'}{'depth'};
    $snort_opts{'unsupported'}{'depth'}
        = '[\s;]depth:\s*\d+\s*;';
    delete $snort_opts{'ignore'}{'nocase'};
    $snort_opts{'unsupported'}{'nocase'}
        = '[\s;]nocase\s*;';
}

### make sure some directories exist, etc.
&setup();

### read in configuration info from the config file
&readconf();

### make sure the commands are where the
### config file says they are
&chk_commands();

### make sure the config is correct
&validateconf();

### cache all of the fwsnort iptables chains now that
### we know what all of the interfaces are
&build_fwsnort_chains();

### print a header at the top of the iptables ruleset
### script
&ipt_hdr();

### now that we have the interfaces, add the iptables
### chains to the fwsnort shell script
&ipt_add_chains();

### display the config on STDOUT
&dump_conf() if $dump_conf;

### make sure <type>.rules file exists if --type was
### specified on the command line
&check_type() if $rules_type;

&logr(" .. Begin parsing cycle ..\n", $logfile);

### parse snort rules (signatures)
print "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
    "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n",
    sprintf("%-30s%-10s%-10s%-10s%-10s", '    Snort Rules File',
        'Success', 'Fail', 'Total'), "\n\n";
&parse_snort_rules();

print "\n .. Logfile:         $logfile\n";
print " .. Iptables script: $ipt_ruleset\n";
print "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
    "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n";

### jump packets (as appropriate) from the INPUT and
### FORWARD chains to our fwsnort chains
&ipt_jump_chain();

chmod 0500, $ipt_ruleset;

exit 0;
#===================== end main ======================

sub parse_snort_rules() {
    opendir D, $rules_dir or die " ** Could not open $rules_dir";
    my @rfiles = readdir D;
    closedir D;
    shift @rfiles; shift @rfiles;

    my $abs_num = 0;
    my $sabs_num = 0;
    FILE: for my $rfile (@rfiles) {
        next FILE unless $rfile =~ /\.rules$/;
        if ($rules_type) {
            next FILE unless $rfile =~ /^${rules_type}\.rules$/;
        }
        my ($type) = ($rfile =~ /(\w+)\.rules/);
        printf("%-30s", " .. $rfile");
        &logr(" .. Parsing $rfile\n", $logfile);
        &ipt_type($type);
        open R, "< ${rules_dir}/${rfile}" or die " ** Could not " .
            "open: ${rules_type}/${rfile}";
        my @lines = <R>;
        close R;
        my $line_num    = 0;
        my $rule_num    = 0;
        my $parsed_ctr  = 0;
        my $unsup_ctr   = 0;
        RULE: for my $line (@lines) {
            $line_num++;
            next RULE unless $line =~ /^alert/;
            $rule_num++;  ### keep track of the abs num of rules
            my $rule_hdr;
            my $rule_options;
            $sabs_num++;
            if ($line =~ m|^(.*?)\s+\((.*)\)|) {
                $rule_hdr     = $1;
                $rule_options = $2;
            } else {  ### don't know what type of snort rule it is
                next RULE;
            }
            my $hdr_href = &parse_rule_hdr($rule_hdr);
            unless ($hdr_href) {
                &logr(" ** Unrecognized rule header: \"$rule_hdr\" at ",
                    "line: $line_num.  Skipping rule.\n", $logfile);
                $unsup_ctr++;
                next RULE;
            }
            if ($debug) {
                print STDOUT " .. Header: Proto: $hdr_href->{'proto'}, Src: ",
                    "$hdr_href->{'src'}, Src_p: $hdr_href->{'src_p'}, ",
                    "bidir: $hdr_href->{'bidir'}, Dst: $hdr_href->{'dst'}, ",
                    "Dst_p: $hdr_href->{'dst_p'}\n";
            }
            my $opts_href = &parse_rule_options($rule_options, $line_num);
            unless ($opts_href) {
                $unsup_ctr++;
                next RULE;
            }

            ### construct the iptables rule and add it to $ipt_ruleset
            &ipt_build($hdr_href, $opts_href);

            $parsed_ctr++;  ### keep track of successfully parsed rules
            $abs_num++;;
        }
        printf("%-10s%-10s%-10s\n", $parsed_ctr, $unsup_ctr, $rule_num);
    }
    print "\n";
    if ($abs_num) {  ### we parsed at least one rule
        print " .. Generated iptables rules for $abs_num out of ",
            "$sabs_num signatures: ",
            sprintf("%.2f", $abs_num/$sabs_num*100), "%\n";
    } else {
        print " .. No rules parsed.\n";
    }
    return;
}

sub parse_rule_options() {
    my ($rule_options, $line_num) = @_;

    ### tmp hash we will return
    my %opts;

    if ($snort_sid) {
        if ($rule_options =~ /sid:\s*$snort_sid\s*;/) {
            &logr(" .. matched sid:$snort_sid: $rule_options\n", $logfile);
        } else {
            return 0;
        }
    }

    for my $opt (keys %{$snort_opts{'unsupported'}}) {
        ### see if we match a regex belonging to an supported option
        if ($rule_options =~ /$snort_opts{'unsupported'}{$opt}/) {
            &logr(" ** Unsupported option: \"$opt\" at " .
                "line: $line_num.  Skipping rule.\n", $logfile);
            return 0;
        }
    }

    for my $opt (keys %{$snort_opts{'filter'}}) {
        ### see if we match the option regex
        if ($rule_options =~ /$snort_opts{'filter'}{$opt}/) {
            $opts{$opt} = $1;
        }
    }

    for my $opt (keys %{$snort_opts{'logprefix'}}) {
        if ($rule_options =~ /$snort_opts{'logprefix'}{$opt}/) {
            $opts{$opt} = $1;
        }
    }

    while ($rule_options =~ /(\w+):\s*.*?;/g) {
        my $option = $1;
        if (! defined $opts{$option}
            && ! defined $snort_opts{'ignore'}{$option}) {
            print "$line_num bad option: \"$option\" -- $rule_options\n";
        }
    }
    return \%opts;
}

sub parse_rule_hdr() {
    my $rule_hdr = shift;
    my $bidir = 0;
    if ($rule_hdr =~ m|^alert\s+(\S+)\s+\$?(\S+)\s+\$?(\S+)
                        \s+(\S+)\s+\$?(\S+)\s+\$?(\S+)|x) {
        if ($4 eq '<>') {
            $bidir = 1;
        } elsif ($4 eq '<-') {
            return {
                'proto' => $1,
                'src'   => $5,  ### switch src and dst
                'src_p' => $3,
                'bidir' => 0,
                'dst'   => $2,
                'dst_p' => $6,
            };
        }
        return {
            'proto' => $1,
            'src'   => $2,  ### normal src -> dst
            'src_p' => $3,
            'bidir' => $bidir,
            'dst'   => $5,
            'dst_p' => $6,
        };
    } else {
        return 0;
    }
}

sub build_fwsnort_chains() {

    ### this one is always defined
    $fwsnort_chains{'INPUT'}{$config{'EXTERNAL_INTF'}}
        = "fwsnort_INPUT_$config{'EXTERNAL_INTF'}";

    $fwsnort_chains{'INPUT'}{$config{'INTERNAL_INTF'}}
        = "fwsnort_INPUT_$config{'INTERNAL_INTF'}"
        if defined $config{'INTERNAL_INTF'};

    $fwsnort_chains{'INPUT'}{$config{'DMZ_INTF'}}
        = "fwsnort_INPUT_$config{'DMZ_INTF'}"
        if defined $config{'DMZ_INTF'};

    return;
}

sub ipt_build() {
    my ($hdr_href, $opts_href) = @_;

    ### determine which chain the rule should be added to (default
    ### to the fwsnort_<EXTERNAL_INTF> chain).
#    my $chain = " -A fwsnort_${config{'EXTERNAL_INTF'}}";
#    if ($config{'NUM_INTERFACES'} > 1) {
#        if (defined $config{$hdr_href->{'src'}}
#            && defined $intf_net{$config{$hdr_href->{'src'}}}) {
#            $chain =
#                " -A fwsnort_${intf_net{$config{$hdr_href->{'src'}}}{'name'}}";
#        } elsif (defined $config{$hdr_href->{'dst'}}
#            && defined $intf_net{$hdr_href->{'dst'}}) {
#            $chain =
#                " -A fwsnort_${intf_net{$config{$hdr_href->{'dst'}}}{'name'}}";
#        }
#    }

    my @rules_dst  = ();
    my @rules_chns = ();

    my $src = $hdr_href->{'src'};
    my $dst = $hdr_href->{'dst'};

    if ($src eq 'EXTERNAL_NET') {
        if ($dst eq 'HOME_NET' || $dst eq 'any') {
            push @rules_dst, $intf_net{'EXTERNAL_INTF'}{'ip'};
            push @rules_chns, "fwsnort_INPUT_$config{'EXTERNAL_INTF'}";
        } else {
            print " ** src: $src, dst: $dst\n";
        }
    } elsif ($dst eq 'EXTERNAL_NET') {
        if ($src eq 'HOME_NET' || $src eq 'any') {
            push @rules_dst, $intf_net{'INTERNAL_INTF'}{'ip'};
            push @rules_chns, "fwsnort_INPUT_$config{'INTERNAL_INTF'}";
        } else {
            print " ** src: $src, dst: $dst\n";
        }
    } elsif ($src eq 'any') {
        if ($dst eq 'any') {
            print "dup: $ipt_rule_ctr\n";
            push @rules_dst, $intf_net{'EXTERNAL_INTF'}{'ip'};
            push @rules_chns, "fwsnort_INPUT_$config{'EXTERNAL_INTF'}";
            push @rules_dst, $intf_net{'INTERNAL_INTF'}{'ip'};
            push @rules_chns, "fwsnort_INPUT_$config{'INTERNAL_INTF'}";
        } else {
            print " ** src: $src, dst: $dst\n";
        }
    } elsif ($dst eq 'any') {
        if ($src eq 'any') {
            print "dup: $ipt_rule_ctr\n";
            push @rules_dst, $intf_net{'EXTERNAL_INTF'}{'ip'};
            push @rules_chns, "fwsnort_INPUT_$config{'EXTERNAL_INTF'}";
            push @rules_dst, $intf_net{'INTERNAL_INTF'}{'ip'};
            push @rules_chns, "fwsnort_INPUT_$config{'INTERNAL_INTF'}";
        } else {
            print " ** src: $src, dst: $dst\n";
        }
    } else {
        print " ** src: $src, dst: $dst\n";
    }

    my $ctr = 0;
    for my $dst (@rules_dst) {

        ### build as many iptables rules as we need based on
        ### the source and destination
        &ipt_build_rule(
            "$cmds{'iptables'} -A $rules_chns[$ctr]",
            $hdr_href,
            $opts_href,
            '',
            $dst
        );
        $ctr++;
    }

    return;
}

sub ipt_build_rule() {
    my ($rule, $hdr_href, $opts_href, $src, $dst) = @_;

    ### append the protocol to the rule
    $rule .= " $iptables_opts{'proto'} $hdr_href->{'proto'}";

    ### append the source
    if ($src) {
        $rule .= " $iptables_opts{'src'} $src";
    }

    ### append the source port
    if (defined $config{$hdr_href->{'src_p'}}) {
        $rule .= " $iptables_opts{'src_p'} $config{$hdr_href->{'src_p'}}";
    } elsif ($hdr_href->{'src_p'} ne 'any') {
        $hdr_href->{'src_p'} =~ s/\!/! /;
        $rule .= " $iptables_opts{'src_p'} $hdr_href->{'src_p'}";
    }

    ### append the destination
    if ($dst) {
        $rule .= " $iptables_opts{'dst'} $dst";
    }

    ### append the destination port
    if (defined $config{$hdr_href->{'dst_p'}}) {
        $rule .= " $iptables_opts{'dst_p'} $config{$hdr_href->{'dst_p'}}";
    } elsif ($hdr_href->{'dst_p'} ne 'any') {
        $hdr_href->{'src_p'} =~ s/\!/! /;
        $rule .= " $iptables_opts{'dst_p'} $hdr_href->{'dst_p'}";
    }

    &ipt_build_opts($rule, $opts_href);
    return;
}

sub ipt_build_opts() {
    my ($rule, $opts_href) = @_;

    ### append tcp flags
    if (defined $opts_href->{'flags'}) {
        my $f_str = '';

        $f_str .= 'URG,' if $opts_href->{'flags'} =~ /U/;
        $f_str .= 'ACK,' if $opts_href->{'flags'} =~ /A/;
        $f_str .= 'PSH,' if $opts_href->{'flags'} =~ /P/;
        $f_str .= 'RST,' if $opts_href->{'flags'} =~ /R/;
        $f_str .= 'SYN,' if $opts_href->{'flags'} =~ /S/;
        $f_str .= 'FIN,' if $opts_href->{'flags'} =~ /F/;
        $f_str =~ s/\,$//;

        if ($opts_href->{'flags'} =~ /\+/) {
            ### --tcp-flags ACK ACK
            $rule .= " $iptables_opts{'flags'} $f_str $f_str";
        } else {
            ### --tcp-flags ALL URG,PSH,SYN,FIN
            $rule .= " $iptables_opts{'flags'} ALL $f_str";
        }
    }

    ### append tos
    if (defined $opts_href->{'tos'}) {
        $rule .= " $iptables_opts{'tos'} $opts_href->{'tos'}"
    }

    ### append ttl
    if (defined $opts_href->{'ttl'}) {
        $rule .= " $iptables_opts{'ttl'} $opts_href->{'ttl'}"
    }

    ### append icmp type
    if (defined $opts_href->{'itype'}) {
        $rule .= " $iptables_opts{'itype'} $opts_href->{'itype'}"
    }

    ### append snort content options
    my $content = '';
    if (defined $opts_href->{'uricontent'}) {
        $content = $opts_href->{'uricontent'};
    } elsif (defined $opts_href->{'content'}) {
        $content = $opts_href->{'content'};
    }
    if ($content) {
        if ($content =~ /\|.+\|/) {  ### there is hex data in the content
            $rule .= " $iptables_opts{'content'} --hex-string \"$content\"";
        } else {
            $rule .= " $iptables_opts{'content'} --string \"$content\"";
        }
    }

    ### construct the log-prefix (should only contain the sid
    ### to conserve kernel memory).
    my $log_prefix = " -j LOG --log-prefix \"SID$opts_href->{'sid'} \""
        if defined $opts_href->{'sid'};
    $rule .= $log_prefix;

    ### print the rest of the logprefix snort options in a comment
    ### one line above the rule
    my $comment = '###';
    $comment .= " msg: \"$opts_href->{'msg'}\","
        if defined $opts_href->{'msg'};
    $comment .= " classtype: \"$opts_href->{'classtype'}\","
        if defined $opts_href->{'classtype'};
    $comment .= " reference: \"$opts_href->{'reference'}\","
        if defined $opts_href->{'reference'};
    $comment =~ s/,$//;

    ### write the rule out to the iptables script
    &logr("/bin/echo \" .. rule $ipt_rule_ctr\"\n", $ipt_ruleset);
    &logr("$comment\n", $ipt_ruleset);
    &logr("$rule\n", $ipt_ruleset);
    $ipt_rule_ctr++;

    return;
}

sub ipt_add_chains() {
    &logr("\n###\n############ Create fwsnort iptables chains. " .
        "############\n###\n", $ipt_ruleset);
    for my $type (keys %fwsnort_chains) {
        for my $intf (keys %{$fwsnort_chains{$type}}) {
            &logr("$cmds{'iptables'} -N $fwsnort_chains{$type}{$intf} " .
                "2> /dev/null\n", $ipt_ruleset);
            &logr("$cmds{'iptables'} -F $fwsnort_chains{$type}{$intf}\n\n",
                $ipt_ruleset);
        }
    }
    return;
}

sub ipt_jump_chain() {
    &logr("\n\n### jump traffic from the INPUT chain to the " .
        "$intf_net{'EXTERNAL_INTF'}{'name'} chain.\n", $ipt_ruleset);
    &logr("$cmds{'iptables'} -I INPUT 1 " .
        "-i $intf_net{'EXTERNAL_INTF'}{'name'} " .
        "-j fwsnort_${intf_net{'EXTERNAL_INTF'}{'name'}}\n", $ipt_ruleset);
    if (defined $intf_net{'INTERNAL_INTF'}) {
        &logr("\n\n### jump traffic from the FORWARD chain to the " .
            "$intf_net{'EXTERNAL_INTF'}{'name'} chain.\n", $ipt_ruleset);
        &logr("$cmds{'iptables'} -I FORWARD 1 " .
            "-i $intf_net{'EXTERNAL_INTF'}{'name'} " .
            "-j fwsnort_${intf_net{'EXTERNAL_INTF'}{'name'}}\n", $ipt_ruleset);
    }
#    if (defined $intf_net{'DMZ_INTF'}) {
#        print "$cmds{'iptables'} -I INPUT 1 ",
#            "-i $intf_net{'DMZ_INTF'}{'name'} ",
#            "-j fwsnort_${intf_net{'EXTERNAL_INTF'}{'name'}";

    &logr("\n### EOF ###\n", $ipt_ruleset);
    return;
}

sub ipt_hdr() {
    &logr("#!$cmds{'sh'}\n#\n", $ipt_ruleset);
    &logr("###########################################################" .
        "#############\n", $ipt_ruleset);
    &logr("#\n# File:  $ipt_ruleset\n", $ipt_ruleset);
    &logr("#\n# Purpose:  This script was auto generated by fwsnort, and " .
        "implements\n", $ipt_ruleset);
    &logr("#           an iptables ruleset based upon Snort rules.\n",
        $ipt_ruleset);
    &logr("#\n# Author:  Michael B. Rash (mbr\@cipherdyne.com)\n",
        $ipt_ruleset);
    &logr("#\n", $ipt_ruleset);
    &logr("###########################################################" .
        "#############\n#\n\n", $ipt_ruleset);
    return;
}

sub ipt_type() {
    my $type = shift;
    &logr("\n###\n############ ${type}.rules ############\n###\n",
        $ipt_ruleset);
    return;
}

sub check_type() {
    unless (-e "${rules_dir}/${rules_type}.rules") {
        print " ** \"$rules_type\" is not a valid type.\n",
            "    Choose from the following available signature types:\n";
        opendir D, $rules_dir or die " ** Could not open $rules_dir";
        my @rfiles = readdir D;
        closedir D;
        shift @rfiles; shift @rfiles;
        for my $file (@rfiles) {
            if ($file =~ /^(\S+)\.rules/) {
                print "        $1\n";
            }
        }
        print " ** Exiting.\n";
        exit 1;
    }
    return;
}

sub readconf() {
    open C, "< $fwsnort_conf" or die $!;
    my @lines = <C>;
    close C;
    my $l_ctr = 0;
    for my $line (@lines) {
        $l_ctr++;
        chomp $line;
        next if $line =~ /^\s*#/;
        next unless $line =~ /\S/;
        if ($line =~ /^\s*(\w+)Cmd\s+(\S+);/) {  ### e.g. "iptableCmd"
            $cmds{$1} = $2;
        } elsif ($line =~ /^\s*(\S+)\s+(.*?);/) {
            my $var = $1;
            my $val = $2;
            die " ** $fwsnort_conf: Variable \"$var\" is set to\n",
                "    _CHANGEME_ at line $l_ctr.  Edit $fwsnort_conf.\n"
                if $val eq '_CHANGEME_';
            $config{$var} = $val;
        }
    }
    return;
}

sub validateconf() {
    die " ** The path to ifconfig is not in $fwsnort_conf. Exiting.\n"
        unless defined $cmds{'ifconfig'};

    die " ** $fwsnort_conf: EXTERNAL_INTF is not defined. Exiting.\n"
        unless defined $config{'EXTERNAL_INTF'};
    $intf_type{$config{'EXTERNAL_INTF'}} = 'EXTERNAL_INTF';
    $intf_net{'EXTERNAL_INTF'}{'name'} = $config{'EXTERNAL_INTF'};
    ($intf_net{'EXTERNAL_INTF'}{'ip'}, $intf_net{'EXTERNAL_INTF'}{'net'})
        = &get_intf_net($config{'EXTERNAL_INTF'});

    if (defined $config{'INTERNAL_INTF'}) {
        $intf_type{$config{'INTERNAL_INTF'}} = 'INTERNAL_INTF';
        $intf_net{'INTERNAL_INTF'}{'name'} = $config{'INTERNAL_INTF'};
        ($intf_net{'INTERNAL_INTF'}{'ip'}, $intf_net{'INTERNAL_INTF'}{'net'})
            = &get_intf_net($config{'INTERNAL_INTF'});
    }
    if (defined $config{'DMZ_INTF'}) {
        die " ** $fwsnort_conf: DMZ_INTF cannot be defined without ",
            "also defining INTERNAL_INTF. Exiting.\n";
        $intf_type{$config{'DMZ_INTF'}} = 'DMZ_INTF';
        $intf_net{'DMZ_INTF'}{'name'} = $config{'DMZ_INTF'};
        ($intf_net{'DMZ_INTF'}{'ip'}, $intf_net{'DMZ_INTF'}{'net'})
            = &get_intf_net($config{'DMZ_INTF'});
    }

    ### build ip arrays for the server variables
    &build_ip_arr('HTTP_SERVERS', \@http_servers);
    &build_ip_arr('SMTP_SERVERS', \@smtp_servers);
    &build_ip_arr('DNS_SERVERS', \@dns_servers);
    &build_ip_arr('SQL_SERVERS', \@sql_servers);
    &build_ip_arr('TELNET_SERVERS', \@telnet_servers);
    &build_ip_arr('AIM_SERVERS', \@aim_servers);

    ### build port arrays for the port variables
    &build_port_arr('HTTP_PORTS', \@http_ports);
    &build_port_arr('SHELLCODE_PORTS', \@shellcode_ports);
    &build_port_arr('ORACLE_PORTS', \@oracle_ports);

    ### make sure all necessary iptables options are defined
    ### based on the options in %snort_opts
    for my $snort_opt (keys %{$snort_opts{'filter'}}) {
        die " ** Equivalent iptables filter option not defined\n",
            "    for snort option \"$snort_opt\""
        unless defined $iptables_opts{$snort_opt};
    }

    return;
}

sub build_port_arr() {
    my ($key, $aref) = @_;
    if (defined $config{$key}) {
        @$aref = split /,\s*/, $config{$key};
        for my $port (@$aref) {
            die " ** $fwsnort_conf: $key can only contain a comma\n",
                "    separated list of port numbers.\n"
                unless $port =~ /^\d+$/
                or $port =~ /^\!\d+$/
                or $port =~ /^\d+:\d+$/
                or $port =~ /^!\d+:\d+$/;
        }
        $conf_supported_vars{$key} = '';
    }
    return;
}

sub build_ip_arr() {
    my ($key, $aref) = @_;
    if (defined $config{$key}) {
        my $intf_flag = 0;
        for my $loc (keys %intf_net) {
            if ($config{$key} eq $loc) {
                ### the server variable is tied to an interface
                $intf_flag = 1;
            }
        }
        unless ($intf_flag) {
            @$aref = split /,\s*/, $config{$key};
            for my $ip (@$aref) {
                die " ** $fwsnort_conf: $key can only contain a comma\n",
                    "    separated list of ip addresses.\n"
                    unless $ip =~ /^(?:\d{1,3}\.){3}\d{1,3}$/
                    or $ip =~ m|^(?:\d{1,3}\.){3}\d{1,3}/\d+$|;
            }
        }
        $conf_supported_vars{$key} = '';
    }
    return;
}

sub get_intf_net() {
    my $intf = shift;
    my @if_lines = `$cmds{'ifconfig'} $intf`;
    for my $line (@if_lines) {
        if ($line =~ /^\s+inet\s+addr:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
            \s+Bcast:\S+\s+\s+Mask:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/ix) {
            my ($net, $cidr) = ipv4_network("$1/$2");
            return $1, "${net}/${cidr}";
        }
    }
    die " ** Could not get ip and netmask for interface $intf.  Is the ",
        "    interface up?\n";
}

sub dump_conf() {
    print " .. Interfaces:\n";
    for my $loc (keys %intf_net) {
        print "    Type: $loc, Name: $intf_net{$loc}{'name'}, ",
            "Net: $intf_net{$loc}{'net'}\n";
    }
    print " .. HTTP_SERVERS: ";
    if (defined $config{'HTTP_SERVERS'}) {
        if (@http_servers) {
            print @http_servers, "\n";
        } else {
            print $intf_type{$config{'HTTP_SERVERS'}}, "\n";
        }
    } else {
        print "Not Defined\n";
    }
    print " .. SMTP_SERVERS: ";
    if (defined $config{'SMTP_SERVERS'}) {
        if (@smtp_servers) {
            print @smtp_servers, "\n";
        } else {
            print $intf_type{$config{'SMTP_SERVERS'}}, "\n";
        }
    } else {
        print "Not Defined\n";
    }
    print " .. DNS_SERVERS: ";
    if (defined $config{'DNS_SERVERS'}) {
        if (@dns_servers) {
            print @dns_servers, "\n";
        } else {
            print $intf_type{$config{'DNS_SERVERS'}}, "\n";
        }
    } else {
        print "Not Defined\n";
    }
    print " .. SQL_SERVERS: ";
    if (defined $config{'SQL_SERVERS'}) {
        if (@sql_servers) {
            print @sql_servers, "\n";
        } else {
            print $intf_type{$config{'SQL_SERVERS'}}, "\n";
        }
    } else {
        print "Not Defined\n";
    }
    print " .. TELNET_SERVERS: ";
    if (defined $config{'TELNET_SERVERS'}) {
        if (@telnet_servers) {
            print @telnet_servers, "\n";
        } else {
            print $intf_type{$config{'TELNET_SERVERS'}}, "\n";
        }
    } else {
        print "Not Defined\n";
    }
    print " .. AIM_SERVERS: ";
    if (@aim_servers) {
        print @aim_servers, "\n";
    } else {
        print "Not Defined\n";
    }
    print " .. HTTP_PORTS: ";
    if (@http_ports) {
        print @http_ports, "\n";
    } else {
        print "Not Defined\n";
    }
    print " .. SHELLCODE_PORTS: ";
    if (@shellcode_ports) {
        print @shellcode_ports, "\n";
    } else {
        print "Not Defined\n";
    }
    print " .. ORACLE_PORTS: ";
    if (@oracle_ports) {
        print @oracle_ports, "\n";
    } else {
        print "Not Defined\n";
    }
    exit 0;
}

sub setup() {

    ### turn off buffering
    $| = 1;

    ### these two directories must already exist for
    ### things to work
    die " ** No fwsnort directory: $fwsnort_dir"
        unless -d $fwsnort_dir;
    die " ** No snort rules directory: $rules_dir"
        unless -d $rules_dir;

    ### this directory can be created at runtime
    unless (-d $archive_dir) {
        mkdir $archive_dir, 0500 or die $!;
    }

    ### archive any existing ipt_ruleset file
    &archive($ipt_ruleset);

    return;
}

sub chk_commands() {
    for my $cmd (keys %cmds) {
        die " ** $cmd is not located at $cmds{$cmd}"
            unless -e $cmds{$cmd};
        die " ** $cmd is not executable at $cmds{$cmd}"
            unless -x $cmds{$cmd};
    }
    return;
}

sub archive() {
    my $file = shift;
    my ($filename) = ($file =~ m|.*/(.*)|);
    my $targetbase = "${archive_dir}/${filename}.old";
    for (my $i = 4; $i > 1; $i--) {  ### keep five copies of the old config files
        my $oldfile = $targetbase . $i;
        my $newfile = $targetbase . ($i+1);
        if (-e $oldfile) {
            move $oldfile, $newfile;
        }
    }
    if (-e $targetbase) {
        my $newfile = $targetbase . '2';
        move $targetbase, $newfile;
    }
    &logr(" .. Archiving $file\n", $logfile);
    move $file, $targetbase;   ### move $file into the archive directory
    return;
}

sub logr() {
    my ($msg, $file) = @_;
    if ($stdout) {
        print STDOUT $msg;
    } else {
        open F, ">> $file" or die " ** Could not open $file: $!";
        print F $msg;
        close F;
    }
    return;
}

sub usage() {
    my $exit = shift;
    print <<_USAGE_;

fwsnort usage:
    --fw-apply
    --fw-log
    --fw-drop
    --fw-reject
    -s, --stdout
    -h, --help
_USAGE_
    exit $exit;
}
