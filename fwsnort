#!/usr/bin/perl -w
#
###############################################################################
#
# File: fwsnort
#
# Purpose: To translate snort rules into equivalent iptables rules.
#          fwsnort is based on the original snort2iptables shell script
#          written by William Stearns.
#
# Author: Michael Rash <mbr@cipherdyne.org>
#
# Credits: (see the CREDITS file)
#
# Version: 0.7.0
#
# Copyright (C) 2003-2005 Michael Rash (mbr@cipherdyne.org)
#
# License (GNU Public License):
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#    USA
#
# TODO:
#   - Add the ability to remove rules from a real snort config in the same
#     way we remove them from iptables rulesets in fwsnort (we remove rules
#     from an iptables ruleset if the iptables policy will not allow such
#     traffic through in the first place).
#   - Implement code for the various SERVER variables.
#   - fwsnort.sh generation timestamp.
#   - Two new options: --ipt-tos and --ipt-mark.
#
# Snort Rule Options:
#
#   msg:           Prints a message in alerts and packet logs.
#   logto:         Log the packet to a user specified filename instead of the
#                  standard output file.
#   ttl:           Test the IP header's TTL field value.
#   tos:           Test the IP header's TOS field value.
#   id:            Test the IP header's fragment ID field for a specific
#                  value.
#   ipoption:      Watch the IP option fields for specific codes.
#   fragbits:      Test the fragmentation bits of the IP header.
#   dsize:         Test the packet's payload size against a value.
#   flags          Test the TCP flags for certain values.
#   seq:           Test the TCP sequence number field for a specific value.
#   ack:           Test the TCP acknowledgement field for a specific value.
#   itype:         Test the ICMP type field against a specific value.
#   icode:         Test the ICMP code field against a specific value.
#   icmp_id:       Test the ICMP ECHO ID field against a specific value.
#   icmp_seq:      Test the ICMP ECHO sequence number against a specific
#                  value.
#   content:       Search for a pattern in the packet's payload.
#   content-list:  Search for a set of patterns in the packet's payload.
#   offset:        Modifier for the content option, sets the offset to begin
#                  attempting a pattern match.
#   depth:         Modifier for the content option, sets the maximum search
#                  depth for a pattern match attempt.
#   nocase:        Match the preceding content string with case insensitivity.
#   session        Dumps the application layer information for a given
#                  session.
#   rpc:           Watch RPC services for specific application/procedure
#                  calls.
#   resp:          Active response (knock down connections, etc).
#   react:         Active response (block web sites).
#   reference:     External attack reference ids.
#   sid:           snort rule id.
#   rev:           Rule revision number.
#   classtype:     Rule classification identifier.
#   priority:      Rule severity identifier.
#   uricontent:    Search for a pattern in the URI portion of a packet
#
#   tag:           Advanced logging actions for rules.
#   ip_proto:      IP header's protocol value.
#   sameip:        Determines if source ip equals the destination ip.
#   stateless:     Valid regardless of stream state.
#   regex:         Wildcard pattern matching.
#
############################################################################
#
# $Id$
#

use lib '/usr/lib/fwsnort';
use IO::Socket;
use IPTables::Parse;
use Net::IPv4Addr qw(ipv4_network);
use File::Copy;
use File::Path;
use Sys::Hostname;
use Getopt::Long;
use strict;

#======================== config ========================
my $fwsnort_dir = '/etc/fwsnort';
my $rules_dir   = "${fwsnort_dir}/snort_rules";
my $archive_dir = "${fwsnort_dir}/archive";
my $log_dir     = '/var/log';

### Snort.org no longer allows auto downloads of signatures
my $bleeding_snort_website = 'www.bleedingsnort.com';

### config file
my $fwsnort_conf = "${fwsnort_dir}/fwsnort.conf";

### log file
my $logfile = "${log_dir}/fwsnort.log";

### iptables script
my $ipt_script = "${fwsnort_dir}/fwsnort.sh";

### chain names (these should not really be changed)
my $fws_in                  = 'FWSNORT_INPUT';
my $fws_in_established      = 'FWSNORT_INPUT_ESTAB';
my $fws_out                 = 'FWSNORT_OUTPUT';
my $fws_out_established     = 'FWSNORT_OUTPUT_ESTAB';
my $fws_forward             = 'FWSNORT_FORWARD';
my $fws_forward_established = 'FWSNORT_FORWARD_ESTAB';
#===================== end config =======================

### version number
my $version = '0.7.0';

### supported variables in snort signatures
my %snort_vars = (
    'EXTERNAL_NET'    => '',
    'HOME_NET'        => '',
    'HTTP_SERVERS'    => '',
    'SMTP_SERVERS'    => '',
    'DNS_SERVERS'     => '',
    'HTTP_PORTS'      => '',
    'TELNET_SERVERS'  => '',
    'AIM_SERVERS'     => '',
    'SQL_SERVERS'     => '',
    'SHELLCODE_PORTS' => '',
    'ORACLE_PORTS'    => ''
);

my %ipt_hdr_opts = (
    'src'      => '-s',
    'sport'    => '--sport',
    'dst'      => '-d',
    'dport'    => '--dport',
    'proto'    => '-p',
);

my %snort_opts = (
    ### snort options that we can directly filter on
    ### in iptables rulesets (snort options are separate
    ### from the snort "header" which include protocol,
    ### source, destination, etc.)
    'filter' => {
        'uricontent' => {
            'iptopt' => '-m string',
            'regex'  => '[\s;]uricontent:\s*\"(.*?)\"\s*;'
        },
        'content' => {
            'iptopt' => '-m string',
            'regex'  => '[\s;]content:\s*\"(.*?)\"\s*;'
        },
        'flags' => {
            'iptopt' => '--tcp-flags',
            'regex'  => '[\s;]flags:\s*(.*?)\s*;'
        },
        'itype' => {
            'iptopt' => '--icmp-type',
            'regex'  => '[\s;]itype:\s*(\d+)\s*;'
        },
        'ttl' => {
            'iptopt' => '-m ttl', ### requires CONFIG_IP_NF_MATCH_TTL
            'regex'  => '[\s;]ttl:\s*(.*?)\s*;'
        },
        'tos' => {
            'iptopt' => '--tos', ### requires CONFIG_IP_NF_MATCH_TOS
            'regex'  => '[\s;]tos:\s*(\d+)\s*;'
        },
        'ipopts' => {
            'iptopt' => '-m ipv4options',  ### requires ipv4options extension
            'regex'  => '[\s;]ipopts:\s*(\w+)\s*;'
        },
        'flow' => {
            'iptopt' => '--tcp-flags',
            'regex'  => '[\s;]flow:\s*(.*?)\s*;'
        },
        'ip_proto' => {
            'iptopt' => '-p',
            'regex'  => '[\s;]ip_proto:\s*(.*?)\s*;'
        },
        'resp' => {
            'iptopt' => '-j REJECT',
            'regex'  => '[\s;]resp:\s*(.*?)\s*;'
        }
    },

    ### snort options that can be put into iptables
    ### ruleset, but only in log messages with --log-prefix
    'logprefix' =>  {
        'sid'       => '[\s;]sid:\s*(\d+)\s*;',
        'msg'       => '[\s;]msg:\s*\"(.*?)\"\s*;',  ### we create a space
        'classtype' => '[\s;]classtype:\s*(.*?)\s*;',
        'reference' => '[\s;]reference:\s*(.*?)\s*;',
        'priority'  => '[\s;]priority:\s*(\d+)\s*;',
        'rev'       => '[\s;]rev:\s*(\d+)\s*;',
    },

    ### snort options that cannot be included directly
    ### within iptables filter statements (yet :)
    'unsupported' => {
        'pcre'         => '[\s;]pcre:\s*.*?\s*;',
        'content-list' => '[\s;]content-list:\s*.*?\s*;',
        'dsize'        => '[\s;]dsize:\s*\S+\s*;',
        'ack'          => '[\s;]ack:\s*\d+\s*;',
        'fragbits'     => '[\s;]fragbits:\s*\S+\s*;',
        'content-list' => '[\s;]content\-list:\s*\".*?\"\s*;',
        'rpc'          => '[\s;]rpc:\s*\S+\s*;',
        'byte_test'    => '[\s;]byte_test\s*.*?\s*;',
        'byte_jump'    => '[\s;]byte_jump\s*.*?\s*;',
        'distance'     => '[\s;]distance:\s*(\d+)\s*;',
        'within'       => '[\s;]within:\s*(\d+)\s*;',
        'flowbits'     => '[\s;]flowbits:\s*\S+\s*;',
#        'offset'       => '[\s;]offset:\s*\d+\s*;',
#        'depth'        => '[\s;]depth:\s*\d+\s*;',
#        'ipopts'  => '[\s;]ipopts:\s*(\w+)\s*;',

        ### the following fields get logged by iptables but
        ### we cannot filter them directly (yet).  Functionality
        ### is being built into psad to generate alerts based
        ### on these Snort options.
        'id'       => '[\s;]id:\s*(\d+)\s*;',
        'seq'      => '[\s;]seq:\s*(\d+)\s*;',  ### --log-tcp-sequence
        'icmp_seq' => '[\s;]icmp_seq:\s*(\d+)\s*;',
        'icmp_id'  => '[\s;]icmp_id:\s*(\d+)\s*;',
        'icode'    => '[\s;]icode:\s*(\d+)\s*;',
        'sameip'   => '[\s;]sameip\s*;',
        'regex'    => '[\s;]regex:\s*(.*?)\s*;',
        'isdataat' => '[\s;]isdataat:\s*(.*?)\s*;',
    },

    ### snort options that fwsnort will ignore
    'ignore' => {
        'offset'    => '[\s;]offset:\s*\d+\s*;',
        'depth'     => '[\s;]depth:\s*\d+\s*;',
        'nocase'    => '[\s;]nocase\s*;',
        'logto'     => '[\s;]logto:\s*\S+\s*;',
        'session'   => '[\s;]session\s*;',
        'tag'       => '[\s;]tag:\s*.*?\s*;',
        'threshold' => '[\s;]threshold:\s*.*?\s*;',
        'react'     => '[\s;]react:\s*.*?\s*;'  ### psad can react
    }
);

### array that contains iptables script (will be written
### to $ipt_script)
my @ipt_script_lines = ();

### contains a cache of the iptables policy
my %ipt_policy;

### regex to match ip addresses
my $ip_re = '(?:\d{1,3}\.){3}\d{1,3}';

### config and commands hashes (constructed by readconf())
my %config = ();
my %cmds   = ();

### establish some default behavior
my $home_net   = '';  ### normally comes from fwsnort.conf
my $ext_net    = '';  ### normally comes from fwsnort.conf
my $ipt_apply  = 0;
my $ipt_drop   = 0;
my $ipt_reject = 0;
my $help       = 0;
my $stdout     = 0;
my $debug      = 0;
my $strict     = 0;
my $snort_sid  = 0;
my $dump_conf  = 0;
my $verbose    = 0;
my $print_ver  = 0;
my $ipt_input   = 1;
my $ipt_output  = 1;
my $ipt_forward = 1;
my $update_rules   = 0;  ### used to download latest snort rules
my $ipt_print_type = 0;
my $ipt_rule_ctr   = 1;
my $ipt_sync       = 1;
my $no_ipt_sync    = 0;
my $no_ipt_log     = 0;
my $no_ipt_test    = 0;
my $no_ipt_jumps   = 0;
my $no_ipt_input   = 0;
my $no_ipt_output  = 0;
my $no_ipt_forward = 0;
my $add_deleted    = 0;
my $rules_type     = '';
my $snort_type     = '';
my $ulog_nlgroup   = 1;
my $ulog_mode      = 0;
my $no_ipt_conntrack = 0;
my $ipt_restrict_intf = '';

### make Getopts case sensitive
Getopt::Long::Configure('no_ignore_case');

&usage(1) unless (GetOptions(
    'ipt-apply'      => \$ipt_apply,    # Apply the generated ruleset.
    'ipt-drop'       => \$ipt_drop,     # Add iptables DROP rules.
    'ipt-reject'     => \$ipt_reject,   # Add iptables REJECT rules.
    'ipt-script=s'   => \$ipt_script,   # Manually specify the path to the
                                        # generated iptables script.
    'Home-net=s'     => \$home_net,     # Manually specify home network.
    'External-net=s' => \$ext_net,      # Manually specify external network.
    'snort-sid=i'    => \$snort_sid,    # Parse only this particular snort rule.
    'type=s'         => \$rules_type,   # Process this type of snort rule
                                        # (e.g. "ddos")
    'snort-rdir=s'   => \$rules_dir,    # Manually specify the snort rules
                                        # directory.
    'no-ipt-sync'    => \$no_ipt_sync,  # Do not sync with the iptables policy.
    'no-ipt-log'     => \$no_ipt_log,   # Do not generate iptables logging rules.
    'no-ipt-test'    => \$no_ipt_test,  # Don't perform any checks against
                                        # iptables.
    'no-ipt-jumps'   => \$no_ipt_jumps, # Don't jump packets from the INPUT or
                                        # FORWARD chains.
    'no-ipt-conntrack' => \$no_ipt_conntrack, # Don't use Netfitler connection
                                        # tracking (falls back to ACK flag test).
    'no-ipt-INPUT'   => \$no_ipt_input, # Disable fwsnort rules processed via
                                        # the INPUT chain.
    'no-ipt-OUTPUT'  => \$no_ipt_output, # Disable fwsnort rules processed via
                                         # the OUTPUT chain.
    'no-ipt-FORWARD' => \$no_ipt_forward, # Disable fwsnort rules processed via
                                          # the FORWARD chain.
    'restrict-intf=s' => \$ipt_restrict_intf, # Restrict Netfilter rules to an
                                        # individual interface.
    'update-rules'   => \$update_rules, # Download latest snort rules.
    'add-deleted'    => \$add_deleted,  # Add deleted rules.
    'strict'         => \$strict,       # Strict mode.
    'debug'          => \$debug,        # Debug mode.
    'Dump-conf'      => \$dump_conf,    # Display config variables
    'config=s'       => \$fwsnort_conf, # Manually specify the config file
    'Ulog'           => \$ulog_mode,    # Force ULOG mode.
    'ulog-nlgroup=i' => \$ulog_nlgroup, # Specify the ulogd nl group.
    'verbose'        => \$verbose,
    'logfile=s'      => \$logfile,      # Specify the logfile path.
    'stdout'         => \$stdout,       # Print log messages to stdout.
    'Version'        => \$print_ver,
    'help'           => \$help
));

&usage(0) if $help;

### handle the command line args
&handle_cmd_line();

### import config, initialize various things, etc.
&fwsnort_init();

### download latest snort rules from snort.org
&update_rules() if $update_rules;

### if we are running with $chk_ipt_policy, then cache
### the current iptables policy
&cache_ipt_policy() if $ipt_sync;

### truncate old log (does anyone actually use the fwsnort
### parsing log?)
&truncate_logfile();

### check to make sure iptables has --hex-strings, etc.
&ipt_test() unless $no_ipt_test;

### print a header at the top of the iptables ruleset
### script
&ipt_hdr();

### now that we have the interfaces, add the iptables
### chains to the fwsnort shell script
&ipt_add_chains();

### add any ignore rules to each fwsnort chain by using
### the RETURN target
&ipt_ignore_rules();

### add jump rules for established tcp connections to
### the fwsnort state tracking chains
&ipt_add_conntrack_jumps() unless $no_ipt_conntrack;

### display the config on STDOUT
&dump_conf() if $dump_conf;

### make sure <type>.rules file exists if --type was
### specified on the command line
&check_type() if $rules_type;

&logr("[+] Begin parsing cycle.");

### parse snort rules (signatures)
if ($ipt_sync) {
    print "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
        "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n",
        sprintf("%-30s%-10s%-10s%-10s%-10s", '    Snort Rules File',
            'Success', 'Fail', 'Ipt_apply', 'Total'), "\n\n";
} else {
    print "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
        "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n",
        sprintf("%-30s%-10s%-10s%-10s", '    Snort Rules File',
            'Success', 'Fail', 'Total'), "\n\n";
}

### main subroutine to parse snort rules and add them to the
### fwsnort.sh script.
&parse_snort_rules();

### jump packets (as appropriate) from the INPUT and
### FORWARD chains to our fwsnort chains
&ipt_jump_chain() unless $no_ipt_jumps;

push @ipt_script_lines, "\n### EOF ###";

### write the iptables script out to disk
&write_ipt_script();

chmod 0500, $ipt_script;

print "\n[+] Logfile:         $logfile\n";
print "[+] Iptables script: $ipt_script\n";

if ($ipt_apply) {
    print "[+] Executing $ipt_script\n";
    system $ipt_script;
}
print "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
    "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n";

exit 0;
#===================== end main ======================

sub parse_snort_rules() {
    opendir D, $rules_dir or die "[*] Could not open $rules_dir";
    my @rfiles = readdir D;
    closedir D;
    shift @rfiles; shift @rfiles;

    my $abs_num  = 0;
    my $sabs_num = 0;
    my $tot_ipt_apply = 0;
    my $tot_unsup_ctr = 0;
    FILE: for my $rfile (sort @rfiles) {
        next FILE unless $rfile =~ /\.rules$/;
        $ipt_print_type = 0;
        if ($rules_type) {
            next FILE unless $rfile =~ /^${rules_type}\.rules$/;
        }
        if ($rfile eq 'deleted.rules') {
            next FILE unless $add_deleted;
        }
        ($snort_type) = ($rfile =~ /(\S+)\.rules/);
        printf("%-30s", "[+] $rfile");
        &logr("[+] Parsing $rfile");
        open R, "< ${rules_dir}/${rfile}" or die "[*] Could not ",
            "open: ${rules_type}/${rfile}";
        my @lines = <R>;
        close R;
        my $line_num   = 0;
        my $rule_num   = 0;
        my $parsed_ctr = 0;
        my $unsup_ctr  = 0;
        my $ipt_apply  = 0;
        RULE: for my $rule (@lines) {
            chomp $rule;
            my $rule_hdr;
            my $rule_options;
            $line_num++;

            ### pass == ACCEPT, log == ULOG
            unless ($rule =~ /^\s*alert/ or $rule =~ /^\s*pass/
                    or $rule =~ /^\s*log/) {
                next RULE;
            }
            $rule_num++;  ### keep track of the abs num of rules
            $sabs_num++;

            if ($rule =~ m|^(.*?)\s+\((.*)\)|) {
                $rule_hdr     = $1;
                $rule_options = " $2 ";  ### allows out-of-order options
            } else {
                &logr("[-] Unrecognized rule format at line: $line_num. " .
                    "Skipping.");
                next RULE;
            }

            ### skip all icmp "Undefined Code" rules; psad properly
            ### handles this, but not fwsnort (see the icmp-info.rules
            ### file).
            if ($rfile =~ /icmp/ and $rule_options =~ /undefined\s+code/i) {
                $unsup_ctr++;
                $tot_unsup_ctr++;
                next RULE;
            }

            ### parse header portion of Snort rule
            my $hdr_href = &parse_rule_hdr($rule_hdr, $line_num);
            unless ($hdr_href) {
                &logr("[-] Unrecognized rule header: \"$rule_hdr\" at " .
                    "line: $line_num.  Skipping rule.");
                $unsup_ctr++;
                $tot_unsup_ctr++;
                next RULE;
            }

            ### parse options portion of Snort rule
            my $opts_href = &parse_rule_options($rule_options, $line_num);
            unless ($opts_href) {
                $unsup_ctr++;
                $tot_unsup_ctr++;
                next RULE;
            }

            ### construct the equivalent iptables rule and add it
            ### to $ipt_script
            my $ipt_rv = &ipt_build($hdr_href, $opts_href, $rule);
            if ($ipt_rv) {
                $ipt_apply++;
                $tot_ipt_apply++;
            }
            $parsed_ctr++;  ### keep track of successfully parsed rules
            $abs_num++;;
        }
        if ($ipt_sync) {
            printf("%-10s%-10s%-10s%-10s\n", $parsed_ctr, $unsup_ctr,
                $ipt_apply, $rule_num);
        } else {
            printf("%-10s%-10s%-10s\n", $parsed_ctr, $unsup_ctr, $rule_num);
        }
    }
    if ($ipt_sync) {
        printf("%30s", ' ');
        print "=======================================\n";
        printf("%30s%-10s%-10s%-10s%-10s\n", ' ',
            $abs_num, $tot_unsup_ctr, $tot_ipt_apply, $sabs_num);
    } else {
        printf("%30s", ' ');
        print "=============================\n";
        printf("%30s%-10s%-10s%-10s\n", ' ',
            $abs_num, $tot_unsup_ctr, $sabs_num);
    }
    print "\n";
    if ($abs_num) {  ### we parsed at least one rule
        print "[+] Generated iptables rules for $abs_num out of ",
            "$sabs_num signatures: ",
            sprintf("%.2f", $abs_num/$sabs_num*100), "%\n";
    } else {
        print "[+] No rules parsed.\n";
    }
    if ($ipt_sync) {
        print "[+] Found $tot_ipt_apply applicable snort rules to your " .
            "current iptables\n    policy.\n";
    }
    return;
}

sub parse_rule_options() {
    my ($rule_options, $line_num) = @_;

    ### tmp hash we will return
    my %opts;

    if ($snort_sid) {
        if ($rule_options =~ /sid:\s*$snort_sid\s*;/) {
            &logr("[+] matched sid:$snort_sid: $rule_options");
        } else {
            return '';
        }
    }

    ### get the sid here for logging purposes
    my ($sid) = ($rule_options =~ /$snort_opts{'logprefix'}{'sid'}/);

    for my $opt (keys %{$snort_opts{'unsupported'}}) {
        ### see if we match a regex belonging to an supported option
        if ($rule_options =~ /$snort_opts{'unsupported'}{$opt}/) {
            &logr("[-] SID: $sid  Unsupported option: \"$opt\" at " .
                "line: $line_num.  Skipping rule.");
            return '';
        }
    }
    if ($rule_options =~ /content\s*:.*content\s*:/) {
        &logr("[-] SID: $sid  Unsupported multiple content fields at " .
            "line: $line_num.  Skipping rule.");
        return '';
    }
    if ($rule_options =~ /ip_proto\s*:.*ip_proto\s*:/) {
        &logr("[-] SID: $sid  Unsupported multiple ip_proto fields at " .
            "line: $line_num.  Skipping rule.");
        return '';
    }

    for my $opt (keys %{$snort_opts{'filter'}}) {
        ### see if we match the option regex
        if ($rule_options =~ /$snort_opts{'filter'}{$opt}{'regex'}/) {
            $opts{$opt} = $1;
        }
    }

    for my $opt (keys %{$snort_opts{'logprefix'}}) {
        if ($rule_options =~ /$snort_opts{'logprefix'}{$opt}/) {
            $opts{$opt} = $1;
        }
    }

    while ($rule_options =~ /(\w+):\s*.*?;/g) {
        my $option = $1;
        if (! defined $opts{$option}
            && ! defined $snort_opts{'ignore'}{$option}) {
            &logr("[-] SID: $sid bad option: \"$option\" at line: $line_num " .
                "-- $rule_options");
            return '';
        }
    }

    if (defined $opts{'ipopts'}
            and $opts{'ipopts'} ne 'rr'
            and $opts{'ipopts'} ne 'ts'
            and $opts{'ipopts'} ne 'ssrr'
            and $opts{'ipopts'} ne 'lsrr'
            and $opts{'ipopts'} ne 'any') {
        &logr("[-] SID: $sid  Unsupported ipopts field at " .
            "line: $line_num.  Skipping rule.");
        return '';
    }
    return \%opts;
}

sub parse_rule_hdr() {
    my ($rule_hdr, $line_num) = @_;
    my $bidir = 0;
    my $action = 'alert';  ### default
    if ($rule_hdr =~ /^\s*pass/) {
        $action = 'pass';
    } elsif ($rule_hdr =~ /^\s*log/) {
        $action = 'log';
    }
    if ($rule_hdr =~ m|^\s*\w+\s+(\S+)\s+(\S+)\s+(\S+)
                        \s+(\S+)\s+(\S+)\s+(\S+)|ix) {
        my $proto  = lc($1);
        my $src    = $2;
        my $sport  = $3;
        my $bidir  = $4;
        my $dst    = $5;
        my $dport  = $6;

        unless ($proto =~ /^\w+$/) {
            &logr("[-] Unsupported protocol: \"$proto\" at line: " .
                "$line_num.  Skipping rule.");
            return '';
        }

        my $bidir_flag = 0;
        $bidir_flag = 1 if $bidir eq '<>';
        if ($debug) {
            print STDOUT
"[+] Header: action: $action, proto: $proto, src: $src, sport: $sport, bidir: ",
"$bidir, dst: $dst, dport: $dport\n";
        }

        my %hsh = (
            'action' => $action,
            'proto'  => $proto,
            'src'    => $src,
            'sport'  => $sport,
            'bidir'  => $bidir_flag,
            'dst'    => $dst,
            'dport'  => $dport,
        );

        ### map to exapanded values (e.g. $HOME -> "any" or whatever
        ### is defined in fwsnort.conf)
        for my $var qw(src sport dst dport) {
            my $val = $hsh{$var};
            while ($val =~ /^\s*\$(\w+)/) {
                $val = $1;
                if (defined $config{$val}) {
                    $val = $config{$val};
                } else {
                    &logr("[-] Undefined variable $val in rule header " .
                        "at line: $line_num.");
                    return '';
                }
            }
            $hsh{$var} = $val;
        }
        return \%hsh;
    } else {
        return '';
    }
}

sub ipt_allow_traffic() {
    my ($hdr_href, $chain) = @_;
    my $rv = 0;
    ### check to see if the header is allowed through the
    ### INPUT chain
    my $h_proto = $hdr_href->{'proto'};

    if ($h_proto eq 'icmp') {
        if (defined $ipt_policy{$chain}
                and defined $ipt_policy{$chain}{'icmp'}) {
            return 1;
        }
        return 0;
    }

    my $h_src = $hdr_href->{'src'};
    my $h_dst = $hdr_href->{'dst'};
    my $h_sport;
    my $h_dport;
    if (defined $config{$hdr_href->{'sport'}}) {
        $h_sport = $config{$hdr_href->{'sport'}};
    } else {
        $h_sport = $hdr_href->{'sport'};
    }
    if (defined $config{$hdr_href->{'dport'}}) {
        $h_dport = $config{$hdr_href->{'dport'}};
    } else {
        $h_dport = $hdr_href->{'dport'};
    }
    for my $proto (keys %{$ipt_policy{$chain}}) {
        next unless $h_proto eq $proto;
        for my $sport (keys %{$ipt_policy{$chain}{$proto}}) {
            if (&match_port($sport, $h_sport)) {
                for my $dport (keys %{$ipt_policy{$chain}{$proto}{$sport}}) {
                    if (&match_port($dport, $h_dport)) {
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

sub match_port() {
    my ($ipt_port, $h_port) = @_;
    return 1 if $ipt_port eq '0:0';
    return 1 if $ipt_port eq $h_port;
    return 1 if $h_port eq 0; ### bad traffic (port 0)
    if ($ipt_port =~ /(\d+):(\d+)/) {
        my $s = $1;
        my $e = $2;
        if ($ipt_port !~ /!/) {
            return 1 if $h_port > $s && $h_port < $e;
        } else {
            return 1 if $h_port < $s || $h_port > $e;
        }
    } elsif ($ipt_port =~ /(\d+):/) {
        my $s = $1;
        my $e = 65535;
        if ($ipt_port !~ /!/) {
            return 1 if $h_port > $s && $h_port < $e;
        } else {
            return 1 if $h_port < $s || $h_port > $e;
        }
    } elsif ($ipt_port =~ /:(\d+)/) {
        my $s = 65535;
        my $e = $1;
        if ($ipt_port !~ /!/) {
            return 1 if $h_port > $s && $h_port < $e;
        } else {
            return 1 if $h_port < $s || $h_port > $e;
        }
    } elsif ($ipt_port =~ /!(\d+)/) {
        return 1 if $h_port ne $1;
    }
    return 0;
}

sub cache_ipt_policy() {
    my $ipt = new IPTables::Parse;

    if ($ipt_input) {
        $ipt_policy{'INPUT'} = $ipt->chain_action_rules('filter',
            'INPUT', 'ACCEPT');
    }

    if ($ipt_forward) {
        $ipt_policy{'FORWARD'} = $ipt->chain_action_rules('filter',
            'FORWARD', 'ACCEPT');
    }
    return;
}

sub ipt_build() {
    my ($snort_hdr_href, $snort_opts_href, $orig_snort_rule) = @_;

    my $found_rule = 0;

    ### for Netfilter fwsnort chains
    my @ipt_input_rules   = ();
    my @ipt_output_rules  = ();
    my @ipt_forward_rules = ();

    ### define iptables source and destination
    if ($snort_hdr_href->{'dst'} =~ /any/i) {
        if ($snort_hdr_href->{'src'} =~ /any/i) {
            push @ipt_input_rules, '';
            push @ipt_forward_rules, '';
        } else {
            my $addr_aref = &expand_addresses($snort_hdr_href->{'src'});
            unless ($addr_aref) {
                &logr("[-] No valid source IPs/networks in Snort " .
                    "rule header.");
                return 0;
            }
            for my $src (@$addr_aref) {
                if (&is_local($src)) {
                    push @ipt_output_rules, "$ipt_hdr_opts{'src'} $src";
                } else {
                    push @ipt_input_rules, "$ipt_hdr_opts{'src'} $src";
                }
                push @ipt_forward_rules, "$ipt_hdr_opts{'src'} $src";
            }
        }
    } else {
        my $dst_addr_aref = &expand_addresses($snort_hdr_href->{'dst'});
        unless ($dst_addr_aref) {
            &logr("[-] No valid destination IPs/networks in Snort rule " .
                "header.");
            return 0;
        }
        if ($snort_hdr_href->{'src'} =~ /any/i) {
            for my $dst (@$dst_addr_aref) {
                if (&is_local($dst)) {
                    push @ipt_input_rules, "$ipt_hdr_opts{'dst'} $dst";
                } else {
                    push @ipt_output_rules, "$ipt_hdr_opts{'dst'} $dst";
                }
                push @ipt_forward_rules, "$ipt_hdr_opts{'dst'} $dst";
            }
        } else {
            my $src_addr_aref = &expand_addresses($snort_hdr_href->{'src'});
            unless ($src_addr_aref) {
                &logr("[-] No valid source IPs/networks in Snort rule " .
                    "header.");
                return 0;
            }
            for my $src (@$src_addr_aref) {
                for my $dst (@$dst_addr_aref) {
                    if (&is_local($dst)) {
                        push @ipt_input_rules, "$ipt_hdr_opts{'src'} $src " .
                            "$ipt_hdr_opts{'dst'} $dst";
                    } else {
                        push @ipt_output_rules, "$ipt_hdr_opts{'src'} $src " .
                            "$ipt_hdr_opts{'dst'} $dst";
                    }
                    push @ipt_forward_rules, "$ipt_hdr_opts{'src'} $src " .
                        "$ipt_hdr_opts{'dst'} $dst";
                }
            }
        }
    }

    ### determine which chain (stateful/stateless)
    my $flow_established = '';
    unless ($no_ipt_conntrack) {
        if (defined $snort_hdr_href->{'proto'}
                and $snort_hdr_href->{'proto'} =~ /tcp/i
                and defined $snort_opts_href->{'flow'}
                and $snort_opts_href->{'flow'} =~ /established/i) {
            $flow_established = 'ESTABLISHED';
        }
    }

    if ($ipt_input and @ipt_input_rules) {
        ### build iptables INPUT rules
        for my $src_dst (@ipt_input_rules) {
            my $rule = "\$IPTABLES -A ";

            ### see if we can jump to the ESTABLISHED inspection
            ### chain.
            if ($flow_established) {
                $rule .= $fws_in_established;
            } else {
                $rule .= $fws_in;
            }

            ### append interface restriction if necessary
            if ($ipt_restrict_intf) {
                $rule .= " -i $ipt_restrict_intf";
            } elsif ($src_dst =~ m|127\.0\.0\.\d/|) {
                $rule .= " -i ! lo";
            }

            ### append source and destination criteria
            $rule .= " $src_dst" if $src_dst;

            my $rv = &ipt_build_rule(
                'INPUT',
                $rule,
                $snort_hdr_href,
                $snort_opts_href,
                $orig_snort_rule,
                $flow_established
            );
            $found_rule = 1 if $rv;
        }
    }

    if ($ipt_output and @ipt_output_rules) {
        ### build iptables INPUT rules
        for my $src_dst (@ipt_output_rules) {
            my $rule = "\$IPTABLES -A ";

            ### see if we can jump to the ESTABLISHED inspection
            if ($flow_established) {
                $rule .= $fws_out_established;
            } else {
                $rule .= $fws_out;
            }

            ### append interface restriction if necessary
            if ($ipt_restrict_intf) {
                $rule .= " -o $ipt_restrict_intf";
            } elsif ($src_dst =~ m|127\.0\.0\.\d/|) {
                $rule .= " -o ! lo";
            }

            ### append source and destination criteria
            $rule .= " $src_dst" if $src_dst;

            my $rv = &ipt_build_rule(
                'OUTPUT',
                $rule,
                $snort_hdr_href,
                $snort_opts_href,
                $orig_snort_rule,
                $flow_established
            );
            $found_rule = 1 if $rv;
        }
    }

    if ($ipt_forward and @ipt_forward_rules) {
        ### build iptables INPUT rules
        for my $src_dst (@ipt_forward_rules) {
            my $rule = "\$IPTABLES -A ";

            ### see if we can jump to the ESTABLISHED inspection
            if ($flow_established) {
                $rule .= $fws_forward_established;
            } else {
                $rule .= $fws_forward;
            }

            ### append interface restriction if necessary
            if ($ipt_restrict_intf) {
                $rule .= " -i $ipt_restrict_intf";
            } elsif ($src_dst =~ m|127\.0\.0\.\d/|) {
                $rule .= " -i ! lo";
            }

            ### append source and destination criteria
            $rule .= " $src_dst" if $src_dst;

            my $rv = &ipt_build_rule(
                'FORWARD',
                $rule,
                $snort_hdr_href,
                $snort_opts_href,
                $orig_snort_rule,
                $flow_established
            );
            $found_rule = 1 if $rv;
        }
    }
    return $found_rule;
}

sub is_local() {
    my $addr = shift;
    return 1;
}

sub ipt_build_rule() {
    my ($chain, $rule, $hdr_href, $opts_href,
        $orig_snort_rule, $flow_logging_prefix) = @_;

    ### $chain is either INPUT or FORWARD, and is used only to
    ### see whether or not we need to add the rule to the iptables
    ### script based on whether the built-in chain will pass the
    ### traffic in the first place.
    if ($ipt_sync) {
        if (! &ipt_allow_traffic($hdr_href, $chain)) {
            return 0;
        }
    }

    ### append the protocol to the rule
    if (defined $opts_href->{'ip_proto'}) {
        return 0 unless $opts_href->{'ip_proto'} =~ /^\w+$/;
        $rule .= " $snort_opts{'filter'}{'ip_proto'}{'iptopt'} " .
            "$opts_href->{'ip_proto'}";
    } else {
        return 0 unless $hdr_href->{'proto'} =~ /^\w+$/;
        $rule .= " $ipt_hdr_opts{'proto'} $hdr_href->{'proto'}";
    }

    ### append the source port
    if (defined $config{$hdr_href->{'sport'}}) {
        $config{$hdr_href->{'sport'}} =~ s/\!(\d)/! $1/;
        $rule .= " $ipt_hdr_opts{'sport'} $config{$hdr_href->{'sport'}}";
    } elsif ($hdr_href->{'sport'} ne 'any') {
        $hdr_href->{'sport'} =~ s/\!(\d)/! $1/;
        $rule .= " $ipt_hdr_opts{'sport'} $hdr_href->{'sport'}";
    }

    ### append the destination port
    if (defined $config{$hdr_href->{'dport'}}) {
        $config{$hdr_href->{'dport'}} =~ s/\!(\d)/! $1/;
        $rule .= " $ipt_hdr_opts{'dport'} $config{$hdr_href->{'dport'}}";
    } elsif ($hdr_href->{'dport'} ne 'any') {
        $hdr_href->{'dport'} =~ s/\!(\d)/! $1/;
        $rule .= " $ipt_hdr_opts{'dport'} $hdr_href->{'dport'}";
    }

    &ipt_build_opts($rule, $hdr_href,
        $opts_href, $orig_snort_rule, $flow_logging_prefix);
    return 1;
}

sub ipt_build_opts() {
    my ($rule, $hdr_href, $opts_href,
        $orig_snort_rule, $flow_logging_prefix) = @_;

    ### append tcp flags
    if (defined $opts_href->{'flags'}) {
        my $f_str = '';

        $f_str .= 'URG,' if $opts_href->{'flags'} =~ /U/i;
        $f_str .= 'ACK,' if $opts_href->{'flags'} =~ /A/i;
        $f_str .= 'PSH,' if $opts_href->{'flags'} =~ /P/i;
        $f_str .= 'RST,' if $opts_href->{'flags'} =~ /R/i;
        $f_str .= 'SYN,' if $opts_href->{'flags'} =~ /S/i;
        $f_str .= 'FIN,' if $opts_href->{'flags'} =~ /F/i;
        $f_str =~ s/\,$//;

        if ($opts_href->{'flags'} =~ /\+/) {
            ### --tcp-flags ACK ACK
            $rule .= " $snort_opts{'filter'}{'flags'}{'iptopt'} " .
                "$f_str $f_str";
        } else {
            ### --tcp-flags ALL URG,PSH,SYN,FIN
            $rule .= " $snort_opts{'filter'}{'flags'}{'iptopt'} " .
                "ALL $f_str";
        }
    }

    if ($no_ipt_conntrack) {
        ### fall back to appending --tcp-flags ACK ACK if flow=established.
        ### NOTE: we can't really handle "flow" in the same way snort can,
        ### since there is no way to keep track of which side initiated the
        ### tcp session (where the SYN packet came from), but older versions
        ### of snort (pre 1.9) just used tcp flags "A+" to keep track of
        ### this... we need to do the same.
        if (defined $opts_href->{'flow'} && ! defined $opts_href->{'flags'}) {
            if ($opts_href->{'flow'} =~ /established/i) {
                ### note that this ignores the "stateless" keyword
                ### as it should...
                $rule .= " $snort_opts{'filter'}{'flow'}{'iptopt'} ACK ACK";
            }
        }
    }

    ### append tos (requires CONFIG_IP_NF_MATCH_TOS)
    if (defined $opts_href->{'tos'}) {
        $rule .= " $snort_opts{'filter'}{'tos'}{'iptopt'} " .
            "$opts_href->{'tos'}"
    }

    ### append ttl (requires CONFIG_IP_NF_MATCH_TTL)
    if (defined $opts_href->{'ttl'}) {
        if ($opts_href->{'ttl'} =~ /\<\s*(\d+)/) {
            $rule .= " $snort_opts{'filter'}{'ttl'}{'iptopt'} --ttl-lt $1";
        } elsif ($opts_href->{'ttl'} =~ /\>\s*(\d+)/) {
            $rule .= " $snort_opts{'filter'}{'ttl'}{'iptopt'} --ttl-gt $1";
        } else {
            $rule .= " $snort_opts{'filter'}{'ttl'}{'iptopt'} " .
                "--ttl-eq $opts_href->{'ttl'}";
        }
    }

    ### append icmp type
    if (defined $opts_href->{'itype'}) {
        $rule .= " $snort_opts{'filter'}{'itype'}{'iptopt'} " .
            "$opts_href->{'itype'}"
    }

    ### append ip options
    if (defined $opts_href->{'ipopts'}) {
        $rule .= " $snort_opts{'filter'}{'ipopts'}{'iptopt'} " .
            "--$opts_href->{'ipopts'}"
    }

    ### append snort content options
    my $content = '';
    if (defined $opts_href->{'uricontent'}) {
        $content = $opts_href->{'uricontent'};
    } elsif (defined $opts_href->{'content'}) {
        $content = $opts_href->{'content'};
    }
    if ($content) {
        $content =~ s/`/\\`/g;
        if ($content =~ /\|.+\|/) {  ### there is hex data in the content
            $rule .= " $snort_opts{'filter'}{'content'}{'iptopt'} " .
                "--hex-string \"$content\"";
        } else {
            $rule .= " $snort_opts{'filter'}{'content'}{'iptopt'} " .
                "--string \"$content\"";
        }
    }

    my $log_target = '';
    if ($hdr_href->{'action'} eq 'log' or $ulog_mode) {
        $log_target = " -j ULOG --ulog-nlgroup $ulog_nlgroup " .
            "--ulog-prefix \"SID$opts_href->{'sid'} \""
            if defined $opts_href->{'sid'};
    } else {
        ### construct the log-prefix (should only contain the sid
        ### to conserve kernel memory).
        if ($flow_logging_prefix) {
            $log_target = " -j LOG --log-prefix \"SID$opts_href->{'sid'} " .
                "$flow_logging_prefix \""
                if defined $opts_href->{'sid'};
        } else {
            $log_target = " -j LOG --log-prefix \"SID$opts_href->{'sid'} \""
                if defined $opts_href->{'sid'};
        }
    }

    ### print the rest of the logprefix snort options in a comment
    ### one line above the rule
    my $comment = '###';
    for my $key qw(msg classtype reference priority rev) {
        if (defined $opts_href->{$key}) {
            if ($key eq 'msg') {
                $comment .= qq| $key: "$opts_href->{$key}";|;
            } else {
                $comment .= qq| $key: $opts_href->{$key};|;
            }
        }
    }
    $comment =~ s/,$//;

    ### print the snort rules type header to the fwsnort.sh script
    if (! $ipt_print_type) {
        &ipt_type($snort_type);
        $ipt_print_type = 1;
    }

    ### write the rule out to the iptables script
    &ipt_add_rule($hdr_href, $opts_href, $orig_snort_rule,
        $rule, $log_target, $comment);
    return;
}

sub ipt_add_rule() {
    my ($hdr_href, $opts_href, $orig_snort_rule, $rule_base,
        $log_target, $comment) = @_;

    my $action_rule = '';
    if ($hdr_href->{'proto'} eq 'tcp') {
        if ($hdr_href->{'action'} eq 'pass') {
            $action_rule = "$rule_base -j ACCEPT";
        } else {
            if (defined $opts_href->{'resp'}
                    and $opts_href->{'resp'} =~ /rst/i) {
                ### Netfilter can only send tcp resets to the connection
                ### client, so we can't support rst_rcv, but we should
                ### try to tear the connection down anyway.
                $action_rule = "$rule_base -j REJECT " .
                    "--reject-with tcp-reset";
            } elsif ($ipt_drop) {
                $action_rule = "$rule_base -j DROP";
            } elsif ($ipt_reject) {
                $action_rule = "$rule_base -j REJECT " .
                    "--reject-with tcp-reset";
            }
        }
    } elsif ($hdr_href->{'proto'} eq 'udp') {
        if ($hdr_href->{'action'} eq 'pass') {
            $action_rule = "$rule_base -j ACCEPT";
        } else {
            if (defined $opts_href->{'resp'}
                    and $opts_href->{'resp'} =~ /icmp/i) {
                if ($opts_href->{'resp'} =~ /all/i) {  ### icmp_all
                    $action_rule = "$rule_base -j REJECT " .
                        "--reject-with icmp-port-unreachable";
                } elsif ($opts_href->{'resp'} =~ /net/i) {  ### icmp_net
                    $action_rule = "$rule_base -j REJECT " .
                        "--reject-with icmp-net-unreachable";
                } elsif ($opts_href->{'resp'} =~ /host/i) {  ### icmp_host
                    $action_rule = "$rule_base -j REJECT " .
                        "--reject-with icmp-host-unreachable";
                } elsif ($opts_href->{'resp'} =~ /port/i) {  ### icmp_port
                    $action_rule = "$rule_base -j REJECT " .
                        "--reject-with icmp-port-unreachable";
                }
            } elsif ($ipt_drop) {
                $action_rule = "$rule_base -j DROP";
            } elsif ($ipt_reject) {
                $action_rule = "$rule_base -j REJECT " .
                    "--reject-with icmp-port-unreachable";
            }
        }
    } else {
        if ($hdr_href->{'action'} eq 'pass') {
            $action_rule = "$rule_base -j ACCEPT";
        } else {
            $action_rule = "$rule_base -j DROP";
        }
    }
    my $log_rule = $rule_base . $log_target;

    if ($verbose) {
        push @ipt_script_lines, "### snort rule: $orig_snort_rule";
        push @ipt_script_lines, "\$ECHO \"[+] rule $ipt_rule_ctr\"";
    } else {
        push @ipt_script_lines, $comment;
    }
    if ($hdr_href->{'action'} ne 'pass') {
        push @ipt_script_lines, $log_rule unless $no_ipt_log;
    }
    push @ipt_script_lines, $action_rule
        if $action_rule and ($ipt_drop or $ipt_reject or
            $hdr_href->{'action'} eq 'pass' or defined $opts_href->{'resp'});
    $ipt_rule_ctr++;
    return;
}

sub ipt_ignore_rules() {
    my $ignore_aref = &expand_addresses($config{'IGNORE_ADDR'});

    return unless $#$ignore_aref >= 0;

    push @ipt_script_lines, "\n###\n############ Add IP/network " .
        "ignore rules. ############\n###";

    for my $addr (@$ignore_aref) {
        push @ipt_script_lines, "\$IPTABLES -A " .
            "$fws_in -s $addr -j RETURN" if $ipt_input;
        push @ipt_script_lines, "\$IPTABLES -A " .
            "$fws_out -d $addr -j RETURN" if $ipt_output;
        push @ipt_script_lines, "\$IPTABLES -A " .
            "$fws_forward -s $addr -j RETURN" if $ipt_forward;
    }
    return;
}

sub ipt_add_chains() {
    push @ipt_script_lines, "\n###\n############ Create " .
        "fwsnort Netfilter chains. ############\n###";
    if ($ipt_input) {
        for my $chain ($fws_in, $fws_in_established) {
            if ($no_ipt_conntrack) {
                next if $chain eq $fws_in_established;
            }
            push @ipt_script_lines, "\$IPTABLES -N " .
                "$chain 2> /dev/null";
            push @ipt_script_lines, "\$IPTABLES -F " .
                "$chain\n";
        }
    }
    if ($ipt_output) {
        for my $chain ($fws_out, $fws_out_established) {
            if ($no_ipt_conntrack) {
                next if $chain eq $fws_out_established;
            }
            push @ipt_script_lines, "\$IPTABLES -N " .
                "$chain 2> /dev/null";
            push @ipt_script_lines, "\$IPTABLES -F " .
                "$chain\n";
        }
    }
    if ($ipt_forward) {
        for my $chain ($fws_forward, $fws_forward_established) {
            if ($no_ipt_conntrack) {
                next if $chain eq $fws_forward_established;
            }
            push @ipt_script_lines, "\$IPTABLES -N " .
                "$chain 2> /dev/null";
            push @ipt_script_lines, "\$IPTABLES -F " .
                "$chain\n";
        }
    }

    return;
}

sub ipt_add_conntrack_jumps() {
    ### jump ESTABLISHED tcp traffic to each of the "estab"
    ### chains
    push @ipt_script_lines, "\n###\n############ Inspect ESTABLISHED " .
        "tcp connections. ############\n###";
    if ($ipt_input) {
        push @ipt_script_lines, "\$IPTABLES -A $fws_in -p tcp -m " .
            "state --state ESTABLISHED -j $fws_in_established";
    }
    if ($ipt_output) {
        push @ipt_script_lines, "\$IPTABLES -A $fws_out -p tcp -m " .
            "state --state ESTABLISHED -j $fws_out_established";
    }
    if ($ipt_forward) {
        push @ipt_script_lines, "\$IPTABLES -A $fws_forward -p tcp -m " .
            "state --state ESTABLISHED -j $fws_forward_established";
    }
    return;
}

sub ipt_jump_chain() {
    push @ipt_script_lines, "\n###\n############ Jump traffic " .
        "to the fwsnort chains. ############\n###";
    push @ipt_script_lines, "\$IPTABLES -I INPUT 1 -j $fws_in"
        if $ipt_input;
    push @ipt_script_lines, "\$IPTABLES -I OUTPUT 1 -j $fws_out"
        if $ipt_output;
    push @ipt_script_lines, "\$IPTABLES -I FORWARD 1 -j $fws_forward"
        if $ipt_forward;
    return;
}

sub ipt_hdr() {
    push @ipt_script_lines, "#!$cmds{'sh'}\n#";
    push @ipt_script_lines, "##########################################" .
        "##############################";
    push @ipt_script_lines, "#\n# File:  $ipt_script";
    push @ipt_script_lines, "#\n# Purpose:  This script was auto-" .
        "generated by fwsnort, and implements";
    push @ipt_script_lines, "#           a Netfilter ruleset based upon " .
        "Snort rules.  For more";
    push @ipt_script_lines, "#           information see the fwsnort man " .
        "page or the documentation";
    push @ipt_script_lines, "#           available at " .
        "http://www.cipherdyne.org/fwsnort/";
    push @ipt_script_lines, "#\n# Author:  Michael Rash <mbr\@cipherdyne.org>";
    push @ipt_script_lines, "#\n# Version: $version";
    push @ipt_script_lines, "#";
    push @ipt_script_lines, "###############################################" .
        "#########################\n#\n";

    ### add paths to system binaries (iptables included)
    &ipt_config_section();
    return;
}

sub ipt_config_section() {
    ### build the config section of the iptables script
    push @ipt_script_lines, "#==================== config ====================";
    push @ipt_script_lines, "ECHO=$cmds{'echo'}";
    push @ipt_script_lines, "IPTABLES=$cmds{'iptables'}";
    push @ipt_script_lines, "#================== end config ==================\n";
    return;
}

sub ipt_type() {
    my $type = shift;
    push @ipt_script_lines, "\n###\n############ ${type}.rules #######" .
        "#####\n###";
    push @ipt_script_lines, "\$ECHO \"[+] Adding $type rules.\"";
    return;
}

sub check_type() {
    unless (-e "${rules_dir}/${rules_type}.rules") {
        print "[-] \"$rules_type\" is not a valid type.\n",
            "    Choose from the following available signature types:\n";
        opendir D, $rules_dir or die "[*] Could not open $rules_dir";
        my @rfiles = readdir D;
        closedir D;
        shift @rfiles; shift @rfiles;
        for my $file (@rfiles) {
            if ($file =~ /^(\S+)\.rules/) {
                print "        $1\n";
            }
        }
        print "[-] Exiting.\n";
        exit 1;
    }
    return;
}

sub readconf() {
    open C, "< $fwsnort_conf" or die $!;
    my @lines = <C>;
    close C;
    my $l_ctr = 0;
    for my $line (@lines) {
        $l_ctr++;
        chomp $line;
        next if $line =~ /^\s*#/;
        next unless $line =~ /\S/;
        if ($line =~ /^\s*(\w+)Cmd\s+(\S+);/) {  ### e.g. "iptableCmd"
            $cmds{$1} = $2;
        } elsif ($line =~ /^\s*(\S+)\s+(.*?);/) {
            my $var = $1;
            my $val = $2;
            die "[*] $fwsnort_conf: Variable \"$var\" is set to\n",
                "    _CHANGEME_ at line $l_ctr.  Edit $fwsnort_conf.\n"
                if $val eq '_CHANGEME_';
            $config{$var} = $val;
        }
    }
    return;
}

sub fwsnort_init() {

    ### set umask to -rw-------
    umask 0077;

    ### turn off buffering
    $| = 1;

    ### read in configuration info from the config file
    &readconf();

    ### make sure the commands are where the
    ### config file says they are
    &chk_commands();

    ### make sure all of the required variables are defined
    ### in the config file
    &required_vars();

    ### make sure some directories exist, etc.
    &setup();

    ### may have been specified on the command line
    $home_net = $config{'HOME_NET'} unless $home_net;
    $ext_net  = $config{'EXTERNAL_NET'} unless $ext_net;

    return;
}

sub handle_cmd_line() {

    ### Print the version number and exit if -V given on the command line.
    if ($print_ver) {
        print "[+] fwsnort v$version, by Michael Rash (mbr\@cipherdyne.org)\n";
        exit 0;
    }

    if ($no_ipt_log && not ($ipt_drop or $ipt_reject)) {
        die "[*] --ipt-no-log option can only be used ",
            "with --ipt-drop or --ipt-reject";
    }

    if ($ipt_drop and $ipt_reject) {
        die "[*] Cannot specify both --ipt-drop and --ipt-reject";
    }

    if ($strict) {
        ### make the snort options parser very strict
        $snort_opts{'unsupported'}{'uricontent'}
            = $snort_opts{'filter'}{'uricontent'};
        delete $snort_opts{'filter'}{'uricontent'};
        $snort_opts{'unsupported'}{'offset'}
            = $snort_opts{'ignore'}{'offset'};
        delete $snort_opts{'ignore'}{'offset'};
        $snort_opts{'unsupported'}{'depth'}
            = $snort_opts{'ignore'}{'depth'};
        delete $snort_opts{'ignore'}{'depth'};
        $snort_opts{'unsupported'}{'nocase'}
            = $snort_opts{'ignore'}{'nocase'};
        delete $snort_opts{'ignore'}{'nocase'};
        $snort_opts{'unsupported'}{'threshold'}
            = $snort_opts{'ignore'}{'threshold'};
        delete $snort_opts{'ignore'}{'threshold'};
    }

    $ipt_sync = 0 if $no_ipt_sync;
    $ipt_input   = 0 if $no_ipt_input;
    $ipt_output  = 0 if $no_ipt_output;
    $ipt_forward = 0 if $no_ipt_forward;

    return;
}

sub required_vars() {
    my @required_vars = qw(
        HOME_NET EXTERNAL_NET HTTP_SERVERS SMTP_SERVERS DNS_SERVERS
        SQL_SERVERS TELNET_SERVERS AIM_SERVERS HTTP_PORTS SHELLCODE_PORTS
        ORACLE_PORTS IGNORE_ADDR
    );
    for my $var (@required_vars) {
        die "[*] Variable $var not defined in $fwsnort_conf. Exiting.\n"
            unless defined $config{$var};
    }
    return;
}

sub ipt_test() {

    ### test for the LOG target.
    my $rv = (system "$cmds{'iptables'} -I INPUT 1 -s " .
        "127.0.0.2 -j LOG 2> /dev/null") >> 8;
    if ($rv == 0) {
        system "$cmds{'iptables'} -D INPUT 1";
    } else {
        die "[*] Iptables has not been compiled with logging support.  ",
            "If you want to\n    have fwsnort generate an iptables script ",
            "    anyway then specify the\n    --no-ipt-test option. ",
            "Exiting.\n"
            unless $no_ipt_log;
    }

    ### test for the ipv4options extension.
    $rv = (system "$cmds{'iptables'} -I INPUT 1 -p icmp -m " .
        "ipv4options --rr -s 127.0.0.2 -j LOG 2> /dev/null") >> 8;
    if ($rv == 0) {
        system "$cmds{'iptables'} -D INPUT 1";
    } else {
        &logr("[-] Netfilter ipv4options extension not available, " .
            "disabling ipopts translation.");
        ### put ipopts in the unsupported list
        if (defined $snort_opts{'filter'}{'ipopts'}) {
            $snort_opts{'unsupported'}{'ipopts'} =
                $snort_opts{'filter'}{'ipopts'}{'regex'};
            delete $snort_opts{'filter'}{'ipopts'};
        } else {
            $snort_opts{'unsupported'}{'ipopts'} = '[\s;]ipopts:\s*(\w+)\s*;';
        }
    }

    ### test for the ttl match.
    $rv = (system "$cmds{'iptables'} -I INPUT 1 -p icmp -s 127.0.0.2 " .
        "-m ttl --ttl-eq 1 -j LOG 2> /dev/null") >> 8;
    if ($rv == 0) {
        system "$cmds{'iptables'} -D INPUT 1";
    } else {
        ### put ttl in the unsupported list
        &logr("[-] Netfilter TTL match not available, " .
            "disabling ttl translation.");
        if (defined $snort_opts{'filter'}{'ttl'}) {
            $snort_opts{'unsupported'}{'ttl'} =
                $snort_opts{'filter'}{'ttl'}{'regex'};
            delete $snort_opts{'filter'}{'ttl'};
        } else {
            $snort_opts{'unsupported'}{'ttl'} = '[\s;]ttl:\s*(.*?)\s*;';
        }
    }

    ### test for the TOS match.
    $rv = (system "$cmds{'iptables'} -I INPUT 1 -p icmp -s 127.0.0.2 " .
        "-m tos --tos 8 -j LOG 2> /dev/null") >> 8;
    if ($rv == 0) {
        system "$cmds{'iptables'} -D INPUT 1";
    } else {
        ### put tos in the unsupported list
        &logr("[-] Netfilter TOS match not available, " .
            "disabling tos translation.");
        if (defined $snort_opts{'filter'}{'tos'}) {
            $snort_opts{'unsupported'}{'tos'} =
                $snort_opts{'filter'}{'tos'}{'regex'};
            delete $snort_opts{'filter'}{'tos'};
        } else {
            $snort_opts{'unsupported'}{'tos'} = '[\s;]tos:\s*(.*?)\s*;';
        }
    }

    ### test for string match support.
    $rv = (system "$cmds{'iptables'} -I INPUT 1 -s " .
        qq|127.0.0.2 -m string --string "test" -j LOG 2> /dev/null|) >> 8;
    if ($rv == 0) {
        system "$cmds{'iptables'} -D INPUT 1";
    } else {
        die
"[*] It does not appear that string match support has been compiled into\n",
"    Netfilter.  Fwsnort will not be of very much use without this.\n",
"    ** NOTE: If you want to have fwsnort generate a Netfilter policy\n",
"    anyway, specify the --no-ipt-test option.  Exiting.\n";
    }

    ### test for --hex-string
    $rv = (system "$cmds{'iptables'} -I INPUT 1 -s 127.0.0.2 " .
        "-m string --hex-string \"|0a 5d|\" -j LOG 2> /dev/null") >> 8;
    if ($rv == 0) {
        system "$cmds{'iptables'} -D INPUT 1";
    } else {
        die
"[*] It does not appear that the --hex-string patch has been applied.\n",
"    fwsnort will not be of very much use without this. ** NOTE: If you\n",
"    want to have fwsnort generate an Netfilter policy anyway, then",
"    specify the --no-ipt-test option.  Exiting.\n";
    }

    unless ($no_ipt_conntrack) {
        ### test for tcp connection tracking support
        $rv = (system "$cmds{'iptables'} -I INPUT 1 -s 127.0.0.2 -p tcp " .
            "--dport 3001 -m state --state ESTABLISHED -j LOG 2> " .
            "/dev/null") >> 8;
        if ($rv == 0) {
            system "$cmds{'iptables'} -D INPUT 1";
        } else {
        die
"[*] It does not appear that Netfilter has been compiled with connection\n",
"    tracking support.  If you want fwsnort to generated a policy anyway\n",
"    and just use a tcp flags check for established tcp connections, then\n",
"    use the --no-ipt-conntrack option.  **NOTE: The resulting fwsnort\n",
"    Netfilter policy will be susceptible to a stick or snot-style attack.\n",
"    Exiting.\n";
        }
    }

    if ($ipt_reject) {
        ### we are going to generate a policy that drops icmp and udp
        ### packets, and kills tcp sessions with tcp-reset.
        $rv = (system "$cmds{'iptables'} -I INPUT 1 -p tcp -s 127.0.0.2 " .
            "-j REJECT --reject-with tcp-reset 2> /dev/null") >> 8;
        if ($rv == 0) {
            system "$cmds{'iptables'} -D INPUT 1";
        } else {
            die
"[*] It does not appear that the REJECT target has been compiled into\n",
"    Netfilter.  The --ipt-reject option requires this option so that tcp\n",
"    sessions can be killed.  Exiting.\n";
        }
    }

    ### more tests should be added
    return;
}

sub dump_conf() {
    for my $var (sort keys %config) {
        printf "%-30s %s\n", "[+] $var", $config{$var};
    }
    exit 0;
}

sub setup() {

    ### these two directories must already exist for
    ### things to work
    die "[*] No fwsnort directory $fwsnort_dir: $!"
        unless -d $fwsnort_dir;
    die "[*] No snort rules directory $rules_dir: $!"
        unless -d $rules_dir;

    unless (-d $archive_dir) {
        mkdir $archive_dir, 0500 or die $!;
    }

    unless (-d $log_dir) {
        mkdir $log_dir, 0755 or die $!;
    }

    ### archive any existing ipt_script file
    &archive($ipt_script);

    return;
}

sub update_rules() {
    ### make sure we can actually reach snort.org.
    print "[+] Downloading latest rules:\n",
        "    http://$bleeding_snort_website/bleeding-all.rules\n";
    chdir $rules_dir or die "[*] Could not chdir $rules_dir: $!";
    if (-e 'bleeding-all.rules') {
        move 'bleeding-all.rules', 'bleeding-all.rules.tmp'
            or die "[*] Could not move bleeding-all.rules -> ",
            "bleeding-all.rules.tmp";
    }
    system "$cmds{'wget'} http://$bleeding_snort_website/bleeding-all.rules";
    if (-e 'bleeding-all.rules') {  ### successful download
        unlink 'bleeding-all.rules.tmp';
    } else {
        print "[-] Could not download bleeding-all.rules file.\n";
        if (-e 'bleeding-all.rules.tmp') {
            ### move the original back
            move 'bleeding-all.rules', 'bleeding-all.rules.tmp'
                or die "[*] Could not move bleeding-all.rules -> ",
                "bleeding-all.rules.tmp";
        }
    }
    print "[+] Finished.\n";
    exit 0;
}

sub chk_commands() {
    for my $cmd (keys %cmds) {
        die "[*] $cmd is not located at $cmds{$cmd}: $!"
            unless -e $cmds{$cmd};
        die "[*] $cmd is not executable at $cmds{$cmd}: $!"
            unless -x $cmds{$cmd};
    }
    return;
}

sub archive() {
    my $file = shift;
    return unless $file =~ m|/|;
    my ($filename) = ($file =~ m|.*/(.*)|);
    my $targetbase = "${archive_dir}/${filename}.old";
    for (my $i = 4; $i > 1; $i--) {  ### keep five copies of the old config files
        my $oldfile = $targetbase . $i;
        my $newfile = $targetbase . ($i+1);
        if (-e $oldfile) {
            move $oldfile, $newfile;
        }
    }
    if (-e $targetbase) {
        my $newfile = $targetbase . '2';
        move $targetbase, $newfile;
    }
    &logr("[+] Archiving $file");
    move $file, $targetbase;   ### move $file into the archive directory
    return;
}

sub write_ipt_script() {
    open F, "> $ipt_script" or die "[*] Could not open $ipt_script: $!";
    print F "$_\n" for @ipt_script_lines;
    close F;
    return;
}

sub expand_addresses() {
    my $addr_string = shift;
    $addr_string =~ s/\]//;
    $addr_string =~ s/\[//;

    my @addrs = ();

    my @addrstmp = split /\s*,\s*/, $addr_string;
    for my $addr (@addrstmp) {
        if ($addr =~ m|($ip_re/$ip_re)|) {
            push @addrs, $1;
        } elsif ($addr =~ m|($ip_re/\d+)|) {
            push @addrs, $1;
        } elsif ($addr =~ m|($ip_re)|) {
            push @addrs, $1;
        }
    }
    return \@addrs;
}

sub truncate_logfile() {
    open L, "> $logfile" or die "[*] Could not open $logfile: $!";
    close L;
    return;
}

sub logr() {
    my $msg = shift;
    if ($stdout) {
        print STDOUT "$msg\n";
    } else {
        open F, ">> $logfile" or die "[*] Could not open $logfile: $!";
        print F "$msg\n";
        close F;
    }
    return;
}

sub usage() {
    my $exit = shift;
    print <<_USAGE_;

fwsnort v$version
[+] By Michael Rash <mbr\@cipherdyne.org>, http://www.cipherdyne.org/

Usage: fwsnort [-t <snort rule type>] [-l <logfile>] [-v] [-V] [-h]
       [-u] [-c <config file>] [--snort-sid=<sid>] [--ipt-apply]
       [--Home-net <net>] [--External-net <net>] [--ipt-drop]
       [--ipt-script=<script>] [--no-ipt-sync] [--no-ipt-log]
       [--no-ipt-test] [--no-ipt-jumps] [--dump-conf] [--debug]
       [--strict]

Options:
    --strict                  - Make snort parser very strict about
                                which options it will translate into
                                iptables rules.
    --ipt-script=<script>     - Print iptables script to <script>
                                instead of the normal location at
                                $ipt_script
    --ipt-apply               - Execute the fwsnort.sh script.
    --ipt-reject              - Add a protocol dependent REJECT rule
                                (tcp resets for tcp or icmp port
                                unreachable for udp messages) for
                                every logging rule.
    --ipt-drop                - Add a DROP rule for every logging rule.
    --snort-sid=<sid>         - Generate an equivalent iptables rule
                                for the specific snort id <sid>.
    --no-ipt-sync             - Add iptables rules for signatures that
                                are already blocked by iptables.
    --no-ipt-log              - Do not generate iptables log rules
                                (can only be used with --ipt-drop).
    --no-ipt-test             - Do not run any checks for availability
                                of iptables modules (string, LOG,
                                ttl, etc.).
    --no-ipt-jumps            - Do not jump packets from built-in
                                iptables INPUT or FORWARD chains to
                                chains created by fwsnort.
    --Home-net <net/mask>     - Manually specify the Home network
                                (CIDR or standard notation).
    --External-net <net/mask> - Manually specify the external network
                                (CIDR or standard notation).
    --update-rules            - Download latest Bleeding-Snort rules
                                from http://$bleeding_snort_website/
    -t   --type=<type>        - Only process snort rules of type <type>
                                (e.g. "ddos" or "backdoor")
    -c   --config=<config>    - Use <config> instead of the normal
                                config file located at
                                $fwsnort_conf
    -l   --logfile=<file>     - Log messages to <file> instead of the
                                normal location at
                                $logfile
    -U   --Ulog               - Force ULOG target for all log generation.
    -ulog-nlgroup=<groupnum>  - Specify a ULOG netlink group (the default
                                is 1).  This gets used in -U mode, or for
                                "log" rules since then we need all of the
                                packet to be logged (via the ULOG pcap
                                writer).
    --dump-conf               - Dump configuration on STDOUT and exit.
    --debug                   - Run in debug mode.
    -v   --verbose            - Run in verbose mode.
    -V   --Version            - Print fwsnort version number and exit.
    -h   --help               - Display usage on STDOUT and exit.

_USAGE_
    exit $exit;
}
